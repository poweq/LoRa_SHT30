<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [cmwx1zzabz_0xx\Exe\cmwx1zzabz_0xx.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image cmwx1zzabz_0xx\Exe\cmwx1zzabz_0xx.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6160001: Last Updated: Wed May 26 10:04:01 2021
<BR><P>
<H3>Maximum Stack Usage =       1048 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
LmHandlerProcess &rArr; LoRaMacProcess &rArr; LoRaMacCryptoUnsecureMessage &rArr; SecureElementVerifyAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; lorawan_aes_encrypt &rArr; copy_and_key
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[24]">ADC1_COMP_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24]">ADC1_COMP_IRQHandler</a><BR>
 <LI><a href="#[3f]">memcpy1</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3f]">memcpy1</a><BR>
 <LI><a href="#[107]">memset1</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[107]">memset1</a><BR>
 <LI><a href="#[1c0]">UTIL_MEM_cpy_8</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c0]">UTIL_MEM_cpy_8</a><BR>
 <LI><a href="#[100]">Error_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[100]">Error_Handler</a><BR>
 <LI><a href="#[14]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">HardFault_Handler</a><BR>
 <LI><a href="#[2a7]">UTIL_MEM_set_8</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2a7]">UTIL_MEM_set_8</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[24]">ADC1_COMP_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[86]">AT_ADR_get</a> from lora_at.o(.text.AT_ADR_get) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[87]">AT_ADR_set</a> from lora_at.o(.text.AT_ADR_set) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[ab]">AT_Certif</a> from lora_at.o(.text.AT_Certif) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[88]">AT_DataRate_get</a> from lora_at.o(.text.AT_DataRate_get) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[89]">AT_DataRate_set</a> from lora_at.o(.text.AT_DataRate_set) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[82]">AT_DevAddr_get</a> from lora_at.o(.text.AT_DevAddr_get) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[83]">AT_DevAddr_set</a> from lora_at.o(.text.AT_DevAddr_set) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[80]">AT_DevEUI_get</a> from lora_at.o(.text.AT_DevEUI_get) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[81]">AT_DevEUI_set</a> from lora_at.o(.text.AT_DevEUI_set) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[9c]">AT_DeviceClass_get</a> from lora_at.o(.text.AT_DeviceClass_get) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[9d]">AT_DeviceClass_set</a> from lora_at.o(.text.AT_DeviceClass_set) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[8c]">AT_DutyCycle_get</a> from lora_at.o(.text.AT_DutyCycle_get) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[8d]">AT_DutyCycle_set</a> from lora_at.o(.text.AT_DutyCycle_set) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[9e]">AT_Join</a> from lora_at.o(.text.AT_Join) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[96]">AT_JoinAcceptDelay1_get</a> from lora_at.o(.text.AT_JoinAcceptDelay1_get) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[97]">AT_JoinAcceptDelay1_set</a> from lora_at.o(.text.AT_JoinAcceptDelay1_set) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[98]">AT_JoinAcceptDelay2_get</a> from lora_at.o(.text.AT_JoinAcceptDelay2_get) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[99]">AT_JoinAcceptDelay2_set</a> from lora_at.o(.text.AT_JoinAcceptDelay2_set) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[84]">AT_JoinEUI_get</a> from lora_at.o(.text.AT_JoinEUI_get) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[85]">AT_JoinEUI_set</a> from lora_at.o(.text.AT_JoinEUI_set) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[a2]">AT_LocalTime_get</a> from lora_at.o(.text.AT_LocalTime_get) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[9a]">AT_NetworkID_get</a> from lora_at.o(.text.AT_NetworkID_get) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[9b]">AT_NetworkID_set</a> from lora_at.o(.text.AT_NetworkID_set) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[a0]">AT_PingSlot_get</a> from lora_at.o(.text.AT_PingSlot_get) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[a1]">AT_PingSlot_set</a> from lora_at.o(.text.AT_PingSlot_set) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[7e]">AT_Region_get</a> from lora_at.o(.text.AT_Region_get) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[7f]">AT_Region_set</a> from lora_at.o(.text.AT_Region_set) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[92]">AT_Rx1Delay_get</a> from lora_at.o(.text.AT_Rx1Delay_get) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[93]">AT_Rx1Delay_set</a> from lora_at.o(.text.AT_Rx1Delay_set) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[90]">AT_Rx2DataRate_get</a> from lora_at.o(.text.AT_Rx2DataRate_get) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[91]">AT_Rx2DataRate_set</a> from lora_at.o(.text.AT_Rx2DataRate_set) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[94]">AT_Rx2Delay_get</a> from lora_at.o(.text.AT_Rx2Delay_get) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[95]">AT_Rx2Delay_set</a> from lora_at.o(.text.AT_Rx2Delay_set) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[8e]">AT_Rx2Frequency_get</a> from lora_at.o(.text.AT_Rx2Frequency_get) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[8f]">AT_Rx2Frequency_set</a> from lora_at.o(.text.AT_Rx2Frequency_set) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[9f]">AT_Send</a> from lora_at.o(.text.AT_Send) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[8a]">AT_TransmitPower_get</a> from lora_at.o(.text.AT_TransmitPower_get) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[8b]">AT_TransmitPower_set</a> from lora_at.o(.text.AT_TransmitPower_set) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[ac]">AT_bat_get</a> from lora_at.o(.text.AT_bat_get) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[7a]">AT_reset</a> from lora_at.o(.text.AT_reset) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[79]">AT_return_error</a> from lora_at.o(.text.AT_return_error) referenced 49 times from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[a8]">AT_test_get_config</a> from lora_at.o(.text.AT_test_get_config) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[a6]">AT_test_rx</a> from lora_at.o(.text.AT_test_rx) referenced 2 times from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[a3]">AT_test_rxRssi</a> from lora_at.o(.text.AT_test_rxRssi) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[a9]">AT_test_set_config</a> from lora_at.o(.text.AT_test_set_config) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[aa]">AT_test_stop</a> from lora_at.o(.text.AT_test_stop) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[a5]">AT_test_tx</a> from lora_at.o(.text.AT_test_tx) referenced 2 times from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[a4]">AT_test_txTone</a> from lora_at.o(.text.AT_test_txTone) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[a7]">AT_test_tx_hopping</a> from lora_at.o(.text.AT_test_tx_hopping) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[7b]">AT_verbose_get</a> from lora_at.o(.text.AT_verbose_get) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[7c]">AT_verbose_set</a> from lora_at.o(.text.AT_verbose_set) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[7d]">AT_version_get</a> from lora_at.o(.text.AT_version_get) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[60]">BSP_LED_Init</a> from b-l072z-lrwan1.o(.text.BSP_LED_Init) referenced from lora_app.o(.text.LoRaWAN_Init)
 <LI><a href="#[3c]">CMD_GetChar</a> from lora_command.o(.text.CMD_GetChar) referenced from lora_command.o(.text.CMD_Init)
 <LI><a href="#[69]">CMD_Process</a> from lora_command.o(.text.CMD_Process) referenced from lora_app.o(.text.LoRaWAN_Init)
 <LI><a href="#[b5]">CMWX1ZZABZ0XX_RADIO_CheckRfFrequency</a> from cmwx1zzabz_0xx.o(.text.CMWX1ZZABZ0XX_RADIO_CheckRfFrequency) referenced from sx1276.o(.rodata.Radio)
 <LI><a href="#[3a]">CertifSend</a> from lora_at.o(.text.CertifSend) referenced from lora_at.o(.text.AT_Certif)
 <LI><a href="#[61]">CmdProcessNotify</a> from lora_app.o(.text.CmdProcessNotify) referenced from lora_app.o(.text.LoRaWAN_Init)
 <LI><a href="#[21]">DMA1_Channel1_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[22]">DMA1_Channel2_3_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[23]">DMA1_Channel4_5_6_7_IRQHandler</a> from stm32l0xx_it.o(.text.DMA1_Channel4_5_6_7_IRQHandler) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[4f]">DummyCB</a> from loramaccrypto.o(.text.DummyCB) referenced from loramaccrypto.o(.text.LoRaMacCryptoInit)
 <LI><a href="#[6f]">DummyCB</a> from soft-se.o(.text.DummyCB) referenced from soft-se.o(.text.SecureElementInit)
 <LI><a href="#[1d]">EXTI0_1_IRQHandler</a> from stm32l0xx_it.o(.text.EXTI0_1_IRQHandler) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[1e]">EXTI2_3_IRQHandler</a> from stm32l0xx_it.o(.text.EXTI2_3_IRQHandler) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[1f]">EXTI4_15_IRQHandler</a> from stm32l0xx_it.o(.text.EXTI4_15_IRQHandler) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[5f]">EventClassBNvmCtxChanged</a> from loramac.o(.text.EventClassBNvmCtxChanged) referenced from loramac.o(.text.LoRaMacInitialization)
 <LI><a href="#[5e]">EventCommandsNvmCtxChanged</a> from loramac.o(.text.EventCommandsNvmCtxChanged) referenced from loramac.o(.text.LoRaMacInitialization)
 <LI><a href="#[50]">EventConfirmQueueNvmCtxChanged</a> from loramac.o(.text.EventConfirmQueueNvmCtxChanged) referenced from loramac.o(.text.LoRaMacInitialization)
 <LI><a href="#[5d]">EventCryptoNvmCtxChanged</a> from loramac.o(.text.EventCryptoNvmCtxChanged) referenced from loramac.o(.text.LoRaMacInitialization)
 <LI><a href="#[5c]">EventSecureElementNvmCtxChanged</a> from loramac.o(.text.EventSecureElementNvmCtxChanged) referenced from loramac.o(.text.LoRaMacInitialization)
 <LI><a href="#[1b]">FLASH_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[0]">GetBatteryLevel</a> from sys_app.o(.text.GetBatteryLevel) referenced 2 times from lora_app.o(.data..L_MergedGlobals)
 <LI><a href="#[1]">GetTemperatureLevel</a> from sys_app.o(.text.GetTemperatureLevel) referenced 2 times from lora_app.o(.data..L_MergedGlobals)
 <LI><a href="#[3d]">HAL_GPIO_Init</a> from stm32l0xx_hal_gpio.o(.text.HAL_GPIO_Init) referenced from cmwx1zzabz_0xx.o(.text.CMWX1ZZABZ0XX_RADIO_IoDeInit)
 <LI><a href="#[3d]">HAL_GPIO_Init</a> from stm32l0xx_hal_gpio.o(.text.HAL_GPIO_Init) referenced from cmwx1zzabz_0xx.o(.text.CMWX1ZZABZ0XX_RADIO_IoInit)
 <LI><a href="#[3d]">HAL_GPIO_Init</a> from stm32l0xx_hal_gpio.o(.text.HAL_GPIO_Init) referenced from sys_app.o(.text.SystemApp_Init)
 <LI><a href="#[3e]">HAL_GPIO_WritePin</a> from stm32l0xx_hal_gpio.o(.text.HAL_GPIO_WritePin) referenced from cmwx1zzabz_0xx.o(.text.CMWX1ZZABZ0XX_RADIO_SetAntSw)
 <LI><a href="#[14]">HardFault_Handler</a> from stm32l0xx_it.o(.text.HardFault_Handler) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[2e]">I2C1_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[2f]">I2C2_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[2c]">I2C3_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[25]">LPTIM1_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[4b]">LmHandlerDeviceTimeReq</a> from lmhandler.o(.text.LmHandlerDeviceTimeReq) referenced from lmhandler.o(.text.LmHandlerPackageRegister)
 <LI><a href="#[4d]">LmHandlerJoin</a> from lmhandler.o(.text.LmHandlerJoin) referenced from lmhandler.o(.text.LmHandlerPackageRegister)
 <LI><a href="#[66]">LmHandlerProcess</a> from lmhandler.o(.text.LmHandlerProcess) referenced from lora_app.o(.text.LoRaWAN_Init)
 <LI><a href="#[4c]">LmHandlerSend</a> from lmhandler.o(.text.LmHandlerSend) referenced from lmhandler.o(.text.LmHandlerPackageRegister)
 <LI><a href="#[b]">LmhpComplianceInit</a> from lmhpcompliance.o(.text.LmhpComplianceInit) referenced 2 times from lmhpcompliance.o(.data.LmhpCompliancePackage)
 <LI><a href="#[c]">LmhpComplianceIsInitialized</a> from lmhpcompliance.o(.text.LmhpComplianceIsInitialized) referenced 2 times from lmhpcompliance.o(.data.LmhpCompliancePackage)
 <LI><a href="#[d]">LmhpComplianceIsRunning</a> from lmhpcompliance.o(.text.LmhpComplianceIsRunning) referenced 2 times from lmhpcompliance.o(.data.LmhpCompliancePackage)
 <LI><a href="#[f]">LmhpComplianceOnMcpsConfirm</a> from lmhpcompliance.o(.text.LmhpComplianceOnMcpsConfirm) referenced 2 times from lmhpcompliance.o(.data.LmhpCompliancePackage)
 <LI><a href="#[10]">LmhpComplianceOnMcpsIndication</a> from lmhpcompliance.o(.text.LmhpComplianceOnMcpsIndication) referenced 2 times from lmhpcompliance.o(.data.LmhpCompliancePackage)
 <LI><a href="#[11]">LmhpComplianceOnMlmeConfirm</a> from lmhpcompliance.o(.text.LmhpComplianceOnMlmeConfirm) referenced 2 times from lmhpcompliance.o(.data.LmhpCompliancePackage)
 <LI><a href="#[e]">LmhpComplianceProcess</a> from lmhpcompliance.o(.text.LmhpComplianceProcess) referenced 2 times from lmhpcompliance.o(.data.LmhpCompliancePackage)
 <LI><a href="#[4a]">LoRaMacMibSetRequestConfirm</a> from loramac.o(.text.LoRaMacMibSetRequestConfirm) referenced from lmhandler.o(.text.LmHandlerJoin)
 <LI><a href="#[48]">McpsConfirm</a> from lmhandler.o(.text.McpsConfirm) referenced from lmhandler.o(.text.LmHandlerInit)
 <LI><a href="#[47]">McpsIndication</a> from lmhandler.o(.text.McpsIndication) referenced from lmhandler.o(.text.LmHandlerInit)
 <LI><a href="#[46]">MlmeConfirm</a> from lmhandler.o(.text.MlmeConfirm) referenced from lmhandler.o(.text.LmHandlerInit)
 <LI><a href="#[45]">MlmeIndication</a> from lmhandler.o(.text.MlmeIndication) referenced from lmhandler.o(.text.LmHandlerInit)
 <LI><a href="#[13]">NMI_Handler</a> from stm32l0xx_it.o(.text.NMI_Handler) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[49]">NvmCtxMgmtEvent</a> from nvmctxmgmt.o(.text.NvmCtxMgmtEvent) referenced from lmhandler.o(.text.LmHandlerInit)
 <LI><a href="#[56]">OnAckTimeoutTimerEvent</a> from loramac.o(.text.OnAckTimeoutTimerEvent) referenced from loramac.o(.text.LoRaMacInitialization)
 <LI><a href="#[39]">OnCertifTimer</a> from lora_at.o(.text.OnCertifTimer) referenced from lora_at.o(.text.AT_Certif)
 <LI><a href="#[4e]">OnComplianceTxNextPacketTimerEvent</a> from lmhpcompliance.o(.text.OnComplianceTxNextPacketTimerEvent) referenced from lmhpcompliance.o(.text.LmhpComplianceOnMcpsIndication)
 <LI><a href="#[3]">OnJoinRequest</a> from lora_app.o(.text.OnJoinRequest) referenced 2 times from lora_app.o(.data..L_MergedGlobals)
 <LI><a href="#[64]">OnJoinTimerLedEvent</a> from lora_app.o(.text.OnJoinTimerLedEvent) referenced from lora_app.o(.text.LoRaWAN_Init)
 <LI><a href="#[2]">OnMacProcessNotify</a> from lora_app.o(.text.OnMacProcessNotify) referenced 2 times from lora_app.o(.data..L_MergedGlobals)
 <LI><a href="#[58]">OnRadioRxDone</a> from loramac.o(.text.OnRadioRxDone) referenced from loramac.o(.text.LoRaMacInitialization)
 <LI><a href="#[5b]">OnRadioRxError</a> from loramac.o(.text.OnRadioRxError) referenced from loramac.o(.text.LoRaMacInitialization)
 <LI><a href="#[5a]">OnRadioRxTimeout</a> from loramac.o(.text.OnRadioRxTimeout) referenced from loramac.o(.text.LoRaMacInitialization)
 <LI><a href="#[57]">OnRadioTxDone</a> from loramac.o(.text.OnRadioTxDone) referenced from loramac.o(.text.LoRaMacInitialization)
 <LI><a href="#[59]">OnRadioTxTimeout</a> from loramac.o(.text.OnRadioTxTimeout) referenced from loramac.o(.text.LoRaMacInitialization)
 <LI><a href="#[5]">OnRxData</a> from lora_app.o(.text.OnRxData) referenced 2 times from lora_app.o(.data..L_MergedGlobals)
 <LI><a href="#[71]">OnRxDone</a> from test_rf.o(.text.OnRxDone) referenced from test_rf.o(.text.TST_RX_Start)
 <LI><a href="#[71]">OnRxDone</a> from test_rf.o(.text.OnRxDone) referenced from test_rf.o(.text.TST_TX_Start)
 <LI><a href="#[73]">OnRxError</a> from test_rf.o(.text.OnRxError) referenced from test_rf.o(.text.TST_RX_Start)
 <LI><a href="#[73]">OnRxError</a> from test_rf.o(.text.OnRxError) referenced from test_rf.o(.text.TST_TX_Start)
 <LI><a href="#[74]">OnRxTimeout</a> from test_rf.o(.text.OnRxTimeout) referenced from test_rf.o(.text.TST_RX_Start)
 <LI><a href="#[74]">OnRxTimeout</a> from test_rf.o(.text.OnRxTimeout) referenced from test_rf.o(.text.TST_TX_Start)
 <LI><a href="#[63]">OnRxTimerLedEvent</a> from lora_app.o(.text.OnRxTimerLedEvent) referenced from lora_app.o(.text.LoRaWAN_Init)
 <LI><a href="#[54]">OnRxWindow1TimerEvent</a> from loramac.o(.text.OnRxWindow1TimerEvent) referenced from loramac.o(.text.LoRaMacInitialization)
 <LI><a href="#[55]">OnRxWindow2TimerEvent</a> from loramac.o(.text.OnRxWindow2TimerEvent) referenced from loramac.o(.text.LoRaMacInitialization)
 <LI><a href="#[4]">OnTxData</a> from lora_app.o(.text.OnTxData) referenced 2 times from lora_app.o(.data..L_MergedGlobals)
 <LI><a href="#[52]">OnTxDelayedTimerEvent</a> from loramac.o(.text.OnTxDelayedTimerEvent) referenced from loramac.o(.text.LoRaMacInitialization)
 <LI><a href="#[72]">OnTxDone</a> from test_rf.o(.text.OnTxDone) referenced from test_rf.o(.text.TST_RX_Start)
 <LI><a href="#[72]">OnTxDone</a> from test_rf.o(.text.OnTxDone) referenced from test_rf.o(.text.TST_TX_Start)
 <LI><a href="#[75]">OnTxTimeout</a> from test_rf.o(.text.OnTxTimeout) referenced from test_rf.o(.text.TST_RX_Start)
 <LI><a href="#[75]">OnTxTimeout</a> from test_rf.o(.text.OnTxTimeout) referenced from test_rf.o(.text.TST_TX_Start)
 <LI><a href="#[6a]">OnTxTimerEvent</a> from lora_app.o(.text.OnTxTimerEvent) referenced from lora_app.o(.text.LoRaWAN_Init)
 <LI><a href="#[62]">OnTxTimerLedEvent</a> from lora_app.o(.text.OnTxTimerLedEvent) referenced from lora_app.o(.text.LoRaWAN_Init)
 <LI><a href="#[19]">PVD_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[c7]">PWR_EnterOffMode</a> from stm32_lpm_if.o(.text.PWR_EnterOffMode) referenced from stm32_lpm_if.o(.rodata.UTIL_PowerDriver)
 <LI><a href="#[c3]">PWR_EnterSleepMode</a> from stm32_lpm_if.o(.text.PWR_EnterSleepMode) referenced from stm32_lpm_if.o(.rodata.UTIL_PowerDriver)
 <LI><a href="#[c5]">PWR_EnterStopMode</a> from stm32_lpm_if.o(.text.PWR_EnterStopMode) referenced from stm32_lpm_if.o(.rodata.UTIL_PowerDriver)
 <LI><a href="#[c8]">PWR_ExitOffMode</a> from stm32_lpm_if.o(.text.PWR_ExitOffMode) referenced from stm32_lpm_if.o(.rodata.UTIL_PowerDriver)
 <LI><a href="#[c4]">PWR_ExitSleepMode</a> from stm32_lpm_if.o(.text.PWR_ExitSleepMode) referenced from stm32_lpm_if.o(.rodata.UTIL_PowerDriver)
 <LI><a href="#[c6]">PWR_ExitStopMode</a> from stm32_lpm_if.o(.text.PWR_ExitStopMode) referenced from stm32_lpm_if.o(.rodata.UTIL_PowerDriver)
 <LI><a href="#[16]">PendSV_Handler</a> from stm32l0xx_it.o(.text.PendSV_Handler) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[1c]">RCC_CRS_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[34]">RNG_LPUART1_IRQHandler</a> from stm32l0xx_it.o(.text.RNG_LPUART1_IRQHandler) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[40]">RTC_ByteToBcd2</a> from stm32l0xx_hal_rtc.o(.text.RTC_ByteToBcd2) referenced from stm32l0xx_hal_rtc.o(.text.HAL_RTC_SetTime)
 <LI><a href="#[ca]">RTC_IF_BkUp_Read_Seconds</a> from rtc_if.o(.text.RTC_IF_BkUp_Read_Seconds) referenced from rtc_if.o(.rodata.UTIL_SYSTIMDriver)
 <LI><a href="#[cc]">RTC_IF_BkUp_Read_SubSeconds</a> from rtc_if.o(.text.RTC_IF_BkUp_Read_SubSeconds) referenced from rtc_if.o(.rodata.UTIL_SYSTIMDriver)
 <LI><a href="#[c9]">RTC_IF_BkUp_Write_Seconds</a> from rtc_if.o(.text.RTC_IF_BkUp_Write_Seconds) referenced from rtc_if.o(.rodata.UTIL_SYSTIMDriver)
 <LI><a href="#[cb]">RTC_IF_BkUp_Write_SubSeconds</a> from rtc_if.o(.text.RTC_IF_BkUp_Write_SubSeconds) referenced from rtc_if.o(.rodata.UTIL_SYSTIMDriver)
 <LI><a href="#[d7]">RTC_IF_Convert_Tick2ms</a> from rtc_if.o(.text.RTC_IF_Convert_Tick2ms) referenced from rtc_if.o(.rodata.UTIL_TimerDriver)
 <LI><a href="#[d6]">RTC_IF_Convert_ms2Tick</a> from rtc_if.o(.text.RTC_IF_Convert_ms2Tick) referenced from rtc_if.o(.rodata.UTIL_TimerDriver)
 <LI><a href="#[d5]">RTC_IF_GetMinimumTimeout</a> from rtc_if.o(.text.RTC_IF_GetMinimumTimeout) referenced from rtc_if.o(.rodata.UTIL_TimerDriver)
 <LI><a href="#[cd]">RTC_IF_GetTime</a> from rtc_if.o(.text.RTC_IF_GetTime) referenced from rtc_if.o(.rodata.UTIL_SYSTIMDriver)
 <LI><a href="#[d2]">RTC_IF_GetTimerContext</a> from rtc_if.o(.text.RTC_IF_GetTimerContext) referenced from rtc_if.o(.rodata.UTIL_TimerDriver)
 <LI><a href="#[d3]">RTC_IF_GetTimerElapsedTime</a> from rtc_if.o(.text.RTC_IF_GetTimerElapsedTime) referenced from rtc_if.o(.rodata.UTIL_TimerDriver)
 <LI><a href="#[d4]">RTC_IF_GetTimerValue</a> from rtc_if.o(.text.RTC_IF_GetTimerValue) referenced from rtc_if.o(.rodata.UTIL_TimerDriver)
 <LI><a href="#[ce]">RTC_IF_Init</a> from rtc_if.o(.text.RTC_IF_Init) referenced from rtc_if.o(.rodata.UTIL_TimerDriver)
 <LI><a href="#[d1]">RTC_IF_SetTimerContext</a> from rtc_if.o(.text.RTC_IF_SetTimerContext) referenced from rtc_if.o(.rodata.UTIL_TimerDriver)
 <LI><a href="#[cf]">RTC_IF_StartTimer</a> from rtc_if.o(.text.RTC_IF_StartTimer) referenced from rtc_if.o(.rodata.UTIL_TimerDriver)
 <LI><a href="#[d0]">RTC_IF_StopTimer</a> from rtc_if.o(.text.RTC_IF_StopTimer) referenced from rtc_if.o(.rodata.UTIL_TimerDriver)
 <LI><a href="#[1a]">RTC_IRQHandler</a> from stm32l0xx_it.o(.text.RTC_IRQHandler) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[51]">RegionGetPhyParam</a> from region.o(.text.RegionGetPhyParam) referenced from loramac.o(.text.LoRaMacInitialization)
 <LI><a href="#[12]">Reset_Handler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[30]">SPI1_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[31]">SPI2_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[15]">SVC_Handler</a> from stm32l0xx_it.o(.text.SVC_Handler) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[ae]">SX1276GetStatus</a> from sx1276.o(.text.SX1276GetStatus) referenced from sx1276.o(.rodata.Radio)
 <LI><a href="#[b6]">SX1276GetTimeOnAir</a> from sx1276.o(.text.SX1276GetTimeOnAir) referenced from sx1276.o(.rodata.Radio)
 <LI><a href="#[c2]">SX1276GetWakeupTime</a> from sx1276.o(.text.SX1276GetWakeupTime) referenced from sx1276.o(.rodata.Radio)
 <LI><a href="#[ad]">SX1276Init</a> from sx1276.o(.text.SX1276Init) referenced from sx1276.o(.rodata.Radio)
 <LI><a href="#[b1]">SX1276IsChannelFree</a> from sx1276.o(.text.SX1276IsChannelFree) referenced from sx1276.o(.rodata.Radio)
 <LI><a href="#[6]">SX1276OnDio0Irq</a> from sx1276.o(.text.SX1276OnDio0Irq) referenced 2 times from sx1276.o(.data.DioIrq)
 <LI><a href="#[7]">SX1276OnDio1Irq</a> from sx1276.o(.text.SX1276OnDio1Irq) referenced 2 times from sx1276.o(.data.DioIrq)
 <LI><a href="#[8]">SX1276OnDio2Irq</a> from sx1276.o(.text.SX1276OnDio2Irq) referenced 2 times from sx1276.o(.data.DioIrq)
 <LI><a href="#[9]">SX1276OnDio3Irq</a> from sx1276.o(.text.SX1276OnDio3Irq) referenced 2 times from sx1276.o(.data.DioIrq)
 <LI><a href="#[a]">SX1276OnDio4Irq</a> from sx1276.o(.text.SX1276OnDio4Irq) referenced 2 times from sx1276.o(.data.DioIrq)
 <LI><a href="#[6c]">SX1276OnTimeoutIrq</a> from sx1276.o(.text.SX1276OnTimeoutIrq) referenced from sx1276.o(.text.SX1276Init)
 <LI><a href="#[b2]">SX1276Random</a> from sx1276.o(.text.SX1276Random) referenced from sx1276.o(.rodata.Radio)
 <LI><a href="#[6b]">SX1276Read</a> from sx1276.o(.text.SX1276Read) referenced from sx1276.o(.rodata.Radio)
 <LI><a href="#[6b]">SX1276Read</a> from sx1276.o(.text.SX1276Read) referenced from sx1276.o(.text.RxChainCalibration)
 <LI><a href="#[6b]">SX1276Read</a> from sx1276.o(.text.SX1276Read) referenced from sx1276.o(.text.SX1276Send)
 <LI><a href="#[6b]">SX1276Read</a> from sx1276.o(.text.SX1276Read) referenced from sx1276.o(.text.SX1276SetRx)
 <LI><a href="#[6b]">SX1276Read</a> from sx1276.o(.text.SX1276Read) referenced from sx1276.o(.text.SX1276SetRxConfig)
 <LI><a href="#[6b]">SX1276Read</a> from sx1276.o(.text.SX1276Read) referenced from sx1276.o(.text.SX1276SetTxConfig)
 <LI><a href="#[bf]">SX1276ReadBuffer</a> from sx1276.o(.text.SX1276ReadBuffer) referenced from sx1276.o(.rodata.Radio)
 <LI><a href="#[bd]">SX1276ReadRssi</a> from sx1276.o(.text.SX1276ReadRssi) referenced from sx1276.o(.rodata.Radio)
 <LI><a href="#[b7]">SX1276Send</a> from sx1276.o(.text.SX1276Send) referenced from sx1276.o(.rodata.Radio)
 <LI><a href="#[b0]">SX1276SetChannel</a> from sx1276.o(.text.SX1276SetChannel) referenced from sx1276.o(.rodata.Radio)
 <LI><a href="#[c0]">SX1276SetMaxPayloadLength</a> from sx1276.o(.text.SX1276SetMaxPayloadLength) referenced from sx1276.o(.rodata.Radio)
 <LI><a href="#[af]">SX1276SetModem</a> from sx1276.o(.text.SX1276SetModem) referenced from sx1276.o(.rodata.Radio)
 <LI><a href="#[c1]">SX1276SetPublicNetwork</a> from sx1276.o(.text.SX1276SetPublicNetwork) referenced from sx1276.o(.rodata.Radio)
 <LI><a href="#[ba]">SX1276SetRx</a> from sx1276.o(.text.SX1276SetRx) referenced from sx1276.o(.rodata.Radio)
 <LI><a href="#[b3]">SX1276SetRxConfig</a> from sx1276.o(.text.SX1276SetRxConfig) referenced from sx1276.o(.rodata.Radio)
 <LI><a href="#[b8]">SX1276SetSleep</a> from sx1276.o(.text.SX1276SetSleep) referenced from sx1276.o(.rodata.Radio)
 <LI><a href="#[b9]">SX1276SetStby</a> from sx1276.o(.text.SX1276SetStby) referenced from sx1276.o(.rodata.Radio)
 <LI><a href="#[b4]">SX1276SetTxConfig</a> from sx1276.o(.text.SX1276SetTxConfig) referenced from sx1276.o(.rodata.Radio)
 <LI><a href="#[bc]">SX1276SetTxContinuousWave</a> from sx1276.o(.text.SX1276SetTxContinuousWave) referenced from sx1276.o(.rodata.Radio)
 <LI><a href="#[bb]">SX1276StartCad</a> from sx1276.o(.text.SX1276StartCad) referenced from sx1276.o(.rodata.Radio)
 <LI><a href="#[6d]">SX1276Write</a> from sx1276.o(.text.SX1276Write) referenced from sx1276.o(.rodata.Radio)
 <LI><a href="#[6d]">SX1276Write</a> from sx1276.o(.text.SX1276Write) referenced from sx1276.o(.text.SX1276SetModem)
 <LI><a href="#[6d]">SX1276Write</a> from sx1276.o(.text.SX1276Write) referenced from sx1276.o(.text.SX1276SetRx)
 <LI><a href="#[6d]">SX1276Write</a> from sx1276.o(.text.SX1276Write) referenced from sx1276.o(.text.SX1276SetRxConfig)
 <LI><a href="#[6d]">SX1276Write</a> from sx1276.o(.text.SX1276Write) referenced from sx1276.o(.text.SX1276SetTxContinuousWave)
 <LI><a href="#[be]">SX1276WriteBuffer</a> from sx1276.o(.text.SX1276WriteBuffer) referenced from sx1276.o(.rodata.Radio)
 <LI><a href="#[68]">SendTxData</a> from lora_app.o(.text.SendTxData) referenced from lora_app.o(.text.LoRaWAN_Init)
 <LI><a href="#[17]">SysTick_Handler</a> from stm32l0xx_it.o(.text.SysTick_Handler) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[37]">SystemInit</a> from system_stm32l0xx.o(.text.SystemInit) referenced from startup_stm32l072xx.o(.text)
 <LI><a href="#[2b]">TIM21_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[2d]">TIM22_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[27]">TIM2_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[28]">TIM3_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[29]">TIM6_DAC_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[2a]">TIM7_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[78]">TRACE_TxCpltCallback</a> from stm32_adv_trace.o(.text.TRACE_TxCpltCallback) referenced from stm32_adv_trace.o(.text.UTIL_ADV_TRACE_Init)
 <LI><a href="#[20]">TSC_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[70]">TimestampNow</a> from sys_app.o(.text.TimestampNow) referenced from sys_app.o(.text.SystemApp_Init)
 <LI><a href="#[41]">UART_DMAAbortOnError</a> from stm32l0xx_hal_uart.o(.text.UART_DMAAbortOnError) referenced from stm32l0xx_hal_uart.o(.text.HAL_UART_IRQHandler)
 <LI><a href="#[42]">UART_DMAError</a> from stm32l0xx_hal_uart.o(.text.UART_DMAError) referenced from stm32l0xx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
 <LI><a href="#[44]">UART_DMATransmitCplt</a> from stm32l0xx_hal_uart.o(.text.UART_DMATransmitCplt) referenced from stm32l0xx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
 <LI><a href="#[43]">UART_DMATxHalfCplt</a> from stm32l0xx_hal_uart.o(.text.UART_DMATxHalfCplt) referenced from stm32l0xx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
 <LI><a href="#[76]">UART_RxISR_16BIT</a> from stm32l0xx_hal_uart.o(.text.UART_RxISR_16BIT) referenced from stm32l0xx_hal_uart.o(.text.UART_Start_Receive_IT)
 <LI><a href="#[77]">UART_RxISR_8BIT</a> from stm32l0xx_hal_uart.o(.text.UART_RxISR_8BIT) referenced from stm32l0xx_hal_uart.o(.text.UART_Start_Receive_IT)
 <LI><a href="#[32]">USART1_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[33]">USART2_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[26]">USART4_5_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[35]">USB_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[3b]">UTIL_ADV_TRACE_COND_FSend</a> from stm32_adv_trace.o(.text.UTIL_ADV_TRACE_COND_FSend) referenced from lora_at.o(.text.AT_test_get_config)
 <LI><a href="#[3b]">UTIL_ADV_TRACE_COND_FSend</a> from stm32_adv_trace.o(.text.UTIL_ADV_TRACE_COND_FSend) referenced from lora_at.o(.text.AT_version_get)
 <LI><a href="#[3b]">UTIL_ADV_TRACE_COND_FSend</a> from stm32_adv_trace.o(.text.UTIL_ADV_TRACE_COND_FSend) referenced from lora_app.o(.text.LoRaWAN_Init)
 <LI><a href="#[67]">UTIL_SEQ_RegTask</a> from stm32_seq.o(.text.UTIL_SEQ_RegTask) referenced from lora_app.o(.text.LoRaWAN_Init)
 <LI><a href="#[53]">UTIL_TIMER_Create</a> from stm32_timer.o(.text.UTIL_TIMER_Create) referenced from loramac.o(.text.LoRaMacInitialization)
 <LI><a href="#[53]">UTIL_TIMER_Create</a> from stm32_timer.o(.text.UTIL_TIMER_Create) referenced from lora_app.o(.text.LoRaWAN_Init)
 <LI><a href="#[53]">UTIL_TIMER_Create</a> from stm32_timer.o(.text.UTIL_TIMER_Create) referenced from sx1276.o(.text.SX1276Init)
 <LI><a href="#[65]">UTIL_TIMER_SetPeriod</a> from stm32_timer.o(.text.UTIL_TIMER_SetPeriod) referenced from lora_app.o(.text.LoRaWAN_Init)
 <LI><a href="#[6e]">UTIL_TIMER_Stop</a> from stm32_timer.o(.text.UTIL_TIMER_Stop) referenced from sx1276.o(.text.SX1276SetStby)
 <LI><a href="#[18]">WWDG_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[38]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32l072xx.o(.text)
 <LI><a href="#[36]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[3f]">memcpy1</a> from utilities.o(.text.memcpy1) referenced from loramaccrypto.o(.text.DeriveSessionKey10x)
 <LI><a href="#[d9]">vcom_DeInit</a> from usart_if.o(.text.vcom_DeInit) referenced from usart_if.o(.rodata.UTIL_TraceDriver)
 <LI><a href="#[d8]">vcom_Init</a> from usart_if.o(.text.vcom_Init) referenced from usart_if.o(.rodata.UTIL_TraceDriver)
 <LI><a href="#[da]">vcom_ReceiveInit</a> from usart_if.o(.text.vcom_ReceiveInit) referenced from usart_if.o(.rodata.UTIL_TraceDriver)
 <LI><a href="#[db]">vcom_Trace_DMA</a> from usart_if.o(.text.vcom_Trace_DMA) referenced from usart_if.o(.rodata.UTIL_TraceDriver)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[38]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(.text)
</UL>
<P><STRONG><a name="[2b4]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[dc]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[f5]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[2b5]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[2b6]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[2b7]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[2b8]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[2b9]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[12]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>ADC1_COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>RCC_CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM21_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TIM22_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>USART4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[de]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IF_DelayMs
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IF_Convert_ms2Tick
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[24c]"></a>__aeabi_lmul</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, llmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_lmul
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IF_Convert_Tick2ms
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
</UL>

<P><STRONG><a name="[2ba]"></a>_ll_mul</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, llmul.o(.text), UNUSED)

<P><STRONG><a name="[270]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchClass
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetMacParameters
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920InitDefaults
</UL>

<P><STRONG><a name="[2bb]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[2bc]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[e2]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[2bd]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2be]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[e1]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PayloadEncrypt
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeriveSessionKey10x
</UL>

<P><STRONG><a name="[15b]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMWX1ZZABZ0XX_RADIO_IoInit
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMWX1ZZABZ0XX_RADIO_IoDeInit
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TST_TX_Start
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoHandleJoinAccept
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
</UL>

<P><STRONG><a name="[2bf]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[e3]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[136]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_vsnprintf_like
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimestampNow
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Send
</UL>

<P><STRONG><a name="[154]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_Process
</UL>

<P><STRONG><a name="[e4]"></a>__aeabi_fadd</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floorf
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>

<P><STRONG><a name="[e7]"></a>__aeabi_fsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
</UL>

<P><STRONG><a name="[e8]"></a>__aeabi_frsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[28e]"></a>__aeabi_fmul</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendTxData
</UL>

<P><STRONG><a name="[e9]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendTxData
</UL>

<P><STRONG><a name="[ea]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
</UL>

<P><STRONG><a name="[ec]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
</UL>

<P><STRONG><a name="[ee]"></a>__aeabi_ui2f</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
</UL>

<P><STRONG><a name="[ef]"></a>__aeabi_ui2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
</UL>

<P><STRONG><a name="[25a]"></a>__aeabi_f2iz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendTxData
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
</UL>

<P><STRONG><a name="[f0]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_d2iz &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
</UL>

<P><STRONG><a name="[f1]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2uiz &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
</UL>

<P><STRONG><a name="[f9]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, uidiv_div0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_DeInit
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_vsnprintf_like
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IF_StartTimer
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TST_RX_Start
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_GetBatteryLevel
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_GetTemperatureLevel
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryLevel
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendTxData
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DelayMicroSecond
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonUpdateBandTimeOff
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeLoRa
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
</UL>

<P><STRONG><a name="[f3]"></a>__aeabi_uidivmod</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, uidiv_div0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IF_StartTimer
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacAdrCalcNext
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_aes_set_key
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyRfFreq
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randr
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920NextChannel
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[256]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv_div0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_idiv
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_GetTemperatureLevel
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
</UL>

<P><STRONG><a name="[f2]"></a>__aeabi_idivmod</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, idiv_div0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randr
</UL>

<P><STRONG><a name="[e0]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[2c0]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[df]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[2c1]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[2c2]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[e6]"></a>_float_round</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[e5]"></a>_float_epilogue</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[ed]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[eb]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[2b3]"></a>__ARM_fcmp4</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, fcmp4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fminf
</UL>

<P><STRONG><a name="[2c3]"></a>_fcmp4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fcmp4.o(.text), UNUSED)

<P><STRONG><a name="[dd]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[2c4]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[2c5]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[2c6]"></a>__decompress0</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[106]"></a>AES_CMAC_Final</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, cmac.o(.text.AES_CMAC_Final))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = AES_CMAC_Final &rArr; lorawan_aes_encrypt &rArr; copy_and_key
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_aes_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeCmac
</UL>

<P><STRONG><a name="[109]"></a>AES_CMAC_Init</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, cmac.o(.text.AES_CMAC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AES_CMAC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeCmac
</UL>

<P><STRONG><a name="[10a]"></a>AES_CMAC_SetKey</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cmac.o(.text.AES_CMAC_SetKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = AES_CMAC_SetKey &rArr; lorawan_aes_set_key &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_aes_set_key
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeCmac
</UL>

<P><STRONG><a name="[10c]"></a>AES_CMAC_Update</STRONG> (Thumb, 244 bytes, Stack size 56 bytes, cmac.o(.text.AES_CMAC_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = AES_CMAC_Update &rArr; lorawan_aes_encrypt &rArr; copy_and_key
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_aes_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeCmac
</UL>

<P><STRONG><a name="[86]"></a>AT_ADR_get</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lora_at.o(.text.AT_ADR_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = AT_ADR_get &rArr; print_d &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetAdrEnable
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[87]"></a>AT_ADR_set</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lora_at.o(.text.AT_ADR_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = AT_ADR_set &rArr; LmHandlerSetAdrEnable &rArr; LoRaMacMibSetRequestConfirm &rArr; LoRaMacCryptoSetKey &rArr; LoRaMacCryptoDeriveMcRootKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_set_key &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetAdrEnable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[ab]"></a>AT_Certif</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, lora_at.o(.text.AT_Certif))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = AT_Certif &rArr; LmHandlerJoin &rArr; LoRaMacMlmeRequest &rArr; ScheduleTx &rArr; LoRaMacCryptoSecureMessage &rArr; SecureElementComputeAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; lorawan_aes_encrypt &rArr; copy_and_key
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Start
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_SetPeriod
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Create
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_RegTask
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerJoin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[88]"></a>AT_DataRate_get</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lora_at.o(.text.AT_DataRate_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = AT_DataRate_get &rArr; print_d &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetTxDatarate
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[89]"></a>AT_DataRate_set</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lora_at.o(.text.AT_DataRate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = AT_DataRate_set &rArr; LmHandlerSetTxDatarate &rArr; LoRaMacMibSetRequestConfirm &rArr; LoRaMacCryptoSetKey &rArr; LoRaMacCryptoDeriveMcRootKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_set_key &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetTxDatarate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[82]"></a>AT_DevAddr_get</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lora_at.o(.text.AT_DevAddr_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = AT_DevAddr_get &rArr; print_uint32_as_02x &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetDevAddr
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_uint32_as_02x
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[83]"></a>AT_DevAddr_set</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lora_at.o(.text.AT_DevAddr_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = AT_DevAddr_set &rArr; LmHandlerSetDevAddr &rArr; LmHandlerConfigure &rArr; LoRaMacInitialization &rArr; SecureElementInit &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetDevAddr
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanf_uint32_as_hhx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[80]"></a>AT_DevEUI_get</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lora_at.o(.text.AT_DevEUI_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = AT_DevEUI_get &rArr; print_8_02x &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetDevEUI
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_8_02x
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[81]"></a>AT_DevEUI_set</STRONG> (Thumb, 60 bytes, Stack size 56 bytes, lora_at.o(.text.AT_DevEUI_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = AT_DevEUI_set &rArr; tiny_sscanf &rArr; __aeabi_lmul
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetDevEUI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[9c]"></a>AT_DeviceClass_get</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, lora_at.o(.text.AT_DeviceClass_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = AT_DeviceClass_get &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraInfo_GetPtr
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetCurrentClass
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetBeaconState
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[9d]"></a>AT_DeviceClass_set</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, lora_at.o(.text.AT_DeviceClass_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = AT_DeviceClass_set &rArr; LmHandlerRequestClass &rArr; LoRaMacMibSetRequestConfirm &rArr; LoRaMacCryptoSetKey &rArr; LoRaMacCryptoDeriveMcRootKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_set_key &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraInfo_GetPtr
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerRequestClass
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[8c]"></a>AT_DutyCycle_get</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lora_at.o(.text.AT_DutyCycle_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = AT_DutyCycle_get &rArr; print_d &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetDutyCycleEnable
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[8d]"></a>AT_DutyCycle_set</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lora_at.o(.text.AT_DutyCycle_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = AT_DutyCycle_set &rArr; LmHandlerSetDutyCycleEnable &rArr; LoRaMacTestSetDutyCycleOn &rArr; RegionVerify &rArr; RegionKR920Verify &rArr; VerifyRfFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetDutyCycleEnable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[9e]"></a>AT_Join</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lora_at.o(.text.AT_Join))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = AT_Join &rArr; LmHandlerJoin &rArr; LoRaMacMlmeRequest &rArr; ScheduleTx &rArr; LoRaMacCryptoSecureMessage &rArr; SecureElementComputeAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; lorawan_aes_encrypt &rArr; copy_and_key
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerJoin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[96]"></a>AT_JoinAcceptDelay1_get</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lora_at.o(.text.AT_JoinAcceptDelay1_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = AT_JoinAcceptDelay1_get &rArr; print_u &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetJoinRx1Delay
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_u
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[97]"></a>AT_JoinAcceptDelay1_set</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lora_at.o(.text.AT_JoinAcceptDelay1_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = AT_JoinAcceptDelay1_set &rArr; LmHandlerSetJoinRx1Delay &rArr; LoRaMacMibSetRequestConfirm &rArr; LoRaMacCryptoSetKey &rArr; LoRaMacCryptoDeriveMcRootKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_set_key &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetJoinRx1Delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[98]"></a>AT_JoinAcceptDelay2_get</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lora_at.o(.text.AT_JoinAcceptDelay2_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = AT_JoinAcceptDelay2_get &rArr; print_u &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetJoinRx2Delay
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_u
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[99]"></a>AT_JoinAcceptDelay2_set</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lora_at.o(.text.AT_JoinAcceptDelay2_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = AT_JoinAcceptDelay2_set &rArr; LmHandlerSetJoinRx2Delay &rArr; LoRaMacMibSetRequestConfirm &rArr; LoRaMacCryptoSetKey &rArr; LoRaMacCryptoDeriveMcRootKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_set_key &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetJoinRx2Delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[84]"></a>AT_JoinEUI_get</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lora_at.o(.text.AT_JoinEUI_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = AT_JoinEUI_get &rArr; print_8_02x &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetAppEUI
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_8_02x
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[85]"></a>AT_JoinEUI_set</STRONG> (Thumb, 60 bytes, Stack size 56 bytes, lora_at.o(.text.AT_JoinEUI_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = AT_JoinEUI_set &rArr; LmHandlerSetAppEUI &rArr; LoRaMacMibSetRequestConfirm &rArr; LoRaMacCryptoSetKey &rArr; LoRaMacCryptoDeriveMcRootKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_set_key &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetAppEUI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[a2]"></a>AT_LocalTime_get</STRONG> (Thumb, 68 bytes, Stack size 96 bytes, lora_at.o(.text.AT_LocalTime_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = AT_LocalTime_get &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeLocalTime
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeGet
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[9a]"></a>AT_NetworkID_get</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lora_at.o(.text.AT_NetworkID_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = AT_NetworkID_get &rArr; print_uint32_as_02x &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetNetworkID
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_uint32_as_02x
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[9b]"></a>AT_NetworkID_set</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lora_at.o(.text.AT_NetworkID_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = AT_NetworkID_set &rArr; LmHandlerSetNetworkID &rArr; LmHandlerConfigure &rArr; LoRaMacInitialization &rArr; SecureElementInit &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetNetworkID
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanf_uint32_as_hhx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[a0]"></a>AT_PingSlot_get</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lora_at.o(.text.AT_PingSlot_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = AT_PingSlot_get &rArr; print_d &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetPingPeriodicity
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[a1]"></a>AT_PingSlot_set</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lora_at.o(.text.AT_PingSlot_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = AT_PingSlot_set &rArr; tiny_sscanf &rArr; __aeabi_lmul
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetPingPeriodicity
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[7e]"></a>AT_Region_get</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, lora_at.o(.text.AT_Region_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = AT_Region_get &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetActiveRegion
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[7f]"></a>AT_Region_set</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lora_at.o(.text.AT_Region_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = AT_Region_set &rArr; LmHandlerSetActiveRegion &rArr; LmHandlerConfigure &rArr; LoRaMacInitialization &rArr; SecureElementInit &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetActiveRegion
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[92]"></a>AT_Rx1Delay_get</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lora_at.o(.text.AT_Rx1Delay_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = AT_Rx1Delay_get &rArr; print_u &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetRx1Delay
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_u
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[93]"></a>AT_Rx1Delay_set</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lora_at.o(.text.AT_Rx1Delay_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = AT_Rx1Delay_set &rArr; LmHandlerSetRx1Delay &rArr; LoRaMacMibSetRequestConfirm &rArr; LoRaMacCryptoSetKey &rArr; LoRaMacCryptoDeriveMcRootKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_set_key &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetRx1Delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[90]"></a>AT_Rx2DataRate_get</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lora_at.o(.text.AT_Rx2DataRate_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = AT_Rx2DataRate_get &rArr; print_d &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetRX2Params
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[91]"></a>AT_Rx2DataRate_set</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, lora_at.o(.text.AT_Rx2DataRate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = AT_Rx2DataRate_set &rArr; LmHandlerSetRX2Params &rArr; LoRaMacMibSetRequestConfirm &rArr; LoRaMacCryptoSetKey &rArr; LoRaMacCryptoDeriveMcRootKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_set_key &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetRX2Params
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetRX2Params
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[94]"></a>AT_Rx2Delay_get</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lora_at.o(.text.AT_Rx2Delay_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = AT_Rx2Delay_get &rArr; print_u &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetRx2Delay
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_u
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[95]"></a>AT_Rx2Delay_set</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lora_at.o(.text.AT_Rx2Delay_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = AT_Rx2Delay_set &rArr; LmHandlerSetRx2Delay &rArr; LoRaMacMibSetRequestConfirm &rArr; LoRaMacCryptoSetKey &rArr; LoRaMacCryptoDeriveMcRootKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_set_key &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetRx2Delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[8e]"></a>AT_Rx2Frequency_get</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lora_at.o(.text.AT_Rx2Frequency_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = AT_Rx2Frequency_get &rArr; print_d &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetRX2Params
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[8f]"></a>AT_Rx2Frequency_set</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, lora_at.o(.text.AT_Rx2Frequency_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = AT_Rx2Frequency_set &rArr; LmHandlerSetRX2Params &rArr; LoRaMacMibSetRequestConfirm &rArr; LoRaMacCryptoSetKey &rArr; LoRaMacCryptoDeriveMcRootKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_set_key &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetRX2Params
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetRX2Params
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[9f]"></a>AT_Send</STRONG> (Thumb, 276 bytes, Stack size 40 bytes, lora_at.o(.text.AT_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = AT_Send &rArr; LmHandlerSend &rArr; LmHandlerJoin &rArr; LoRaMacMlmeRequest &rArr; ScheduleTx &rArr; LoRaMacCryptoSecureMessage &rArr; SecureElementComputeAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; lorawan_aes_encrypt &rArr; copy_and_key
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerJoinStatus
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSend
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[8a]"></a>AT_TransmitPower_get</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lora_at.o(.text.AT_TransmitPower_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = AT_TransmitPower_get &rArr; print_d &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetTxPower
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[8b]"></a>AT_TransmitPower_set</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lora_at.o(.text.AT_TransmitPower_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = AT_TransmitPower_set &rArr; LmHandlerSetTxPower &rArr; LoRaMacMibSetRequestConfirm &rArr; LoRaMacCryptoSetKey &rArr; LoRaMacCryptoDeriveMcRootKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_set_key &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetTxPower
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[ac]"></a>AT_bat_get</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lora_at.o(.text.AT_bat_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = AT_bat_get &rArr; print_d &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_GetBatteryLevel
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[13b]"></a>AT_event_confirm</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lora_at.o(.text.AT_event_confirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = AT_event_confirm &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxData
</UL>

<P><STRONG><a name="[13c]"></a>AT_event_join</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lora_at.o(.text.AT_event_join))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = AT_event_join &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnJoinRequest
</UL>

<P><STRONG><a name="[13d]"></a>AT_event_receive</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, lora_at.o(.text.AT_event_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = AT_event_receive &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxData
</UL>

<P><STRONG><a name="[7a]"></a>AT_reset</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lora_at.o(.text.AT_reset))
<BR><BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[79]"></a>AT_return_error</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lora_at.o(.text.AT_return_error))
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[a8]"></a>AT_test_get_config</STRONG> (Thumb, 420 bytes, Stack size 136 bytes, lora_at.o(.text.AT_test_get_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = AT_test_get_config &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TST_get_config
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[a6]"></a>AT_test_rx</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lora_at.o(.text.AT_test_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = AT_test_rx &rArr; TST_RX_Start &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TST_RX_Start
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[a3]"></a>AT_test_rxRssi</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lora_at.o(.text.AT_test_rxRssi))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = AT_test_rxRssi &rArr; TST_RxRssi &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TST_RxRssi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[a9]"></a>AT_test_set_config</STRONG> (Thumb, 372 bytes, Stack size 160 bytes, lora_at.o(.text.AT_test_set_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = AT_test_set_config &rArr; tiny_sscanf &rArr; __aeabi_lmul
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TST_set_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[aa]"></a>AT_test_stop</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lora_at.o(.text.AT_test_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = AT_test_stop &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TST_stop
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[a5]"></a>AT_test_tx</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lora_at.o(.text.AT_test_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = AT_test_tx &rArr; TST_TX_Start &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TST_TX_Start
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[a4]"></a>AT_test_txTone</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lora_at.o(.text.AT_test_txTone))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = AT_test_txTone &rArr; TST_TxTone &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TST_TxTone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[a7]"></a>AT_test_tx_hopping</STRONG> (Thumb, 144 bytes, Stack size 104 bytes, lora_at.o(.text.AT_test_tx_hopping))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = AT_test_tx_hopping &rArr; TST_TX_Start &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TST_set_config
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TST_get_config
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TST_TX_Start
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[7b]"></a>AT_verbose_get</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lora_at.o(.text.AT_verbose_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = AT_verbose_get &rArr; print_u &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_GetVerboseLevel
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_u
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[7c]"></a>AT_verbose_set</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lora_at.o(.text.AT_verbose_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = AT_verbose_set &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_SetVerboseLevel
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[7d]"></a>AT_version_get</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, lora_at.o(.text.AT_version_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AT_version_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[60]"></a>BSP_LED_Init</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, b-l072z-lrwan1.o(.text.BSP_LED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = BSP_LED_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_app.o(.text.LoRaWAN_Init)
</UL>
<P><STRONG><a name="[148]"></a>BSP_LED_Off</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, b-l072z-lrwan1.o(.text.BSP_LED_Off))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_LED_Off
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxTimerLedEvent
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxTimerLedEvent
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnJoinRequest
</UL>

<P><STRONG><a name="[149]"></a>BSP_LED_On</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, b-l072z-lrwan1.o(.text.BSP_LED_On))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_LED_On
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxData
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxData
</UL>

<P><STRONG><a name="[14a]"></a>BSP_LED_Toggle</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, b-l072z-lrwan1.o(.text.BSP_LED_Toggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_LED_Toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnJoinTimerLedEvent
</UL>

<P><STRONG><a name="[14c]"></a>BSP_SPI1_Init</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, b_l072z_lrwan1_bus.o(.text.BSP_SPI1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = BSP_SPI1_Init &rArr; MX_SPI1_Init &rArr; HAL_SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_GetState
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMWX1ZZABZ0XX_RADIO_Bus_Init
</UL>

<P><STRONG><a name="[14f]"></a>BSP_SPI1_SendRecv</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, b_l072z_lrwan1_bus.o(.text.BSP_SPI1_SendRecv))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMWX1ZZABZ0XX_RADIO_SendRecv
</UL>

<P><STRONG><a name="[151]"></a>CMD_Init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lora_command.o(.text.CMD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CMD_Init &rArr; UTIL_ADV_TRACE_StartRxProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_StartRxProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaWAN_Init
</UL>

<P><STRONG><a name="[69]"></a>CMD_Process</STRONG> (Thumb, 548 bytes, Stack size 32 bytes, lora_command.o(.text.CMD_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = CMD_Process &rArr; com_error &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_error
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_app.o(.text.LoRaWAN_Init)
</UL>
<P><STRONG><a name="[156]"></a>CMWX1ZZABZ0XX_RADIO_Bus_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, cmwx1zzabz_0xx.o(.text.CMWX1ZZABZ0XX_RADIO_Bus_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CMWX1ZZABZ0XX_RADIO_Bus_Init &rArr; BSP_SPI1_Init &rArr; MX_SPI1_Init &rArr; HAL_SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SPI1_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemApp_Init
</UL>

<P><STRONG><a name="[b5]"></a>CMWX1ZZABZ0XX_RADIO_CheckRfFrequency</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cmwx1zzabz_0xx.o(.text.CMWX1ZZABZ0XX_RADIO_CheckRfFrequency))
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[157]"></a>CMWX1ZZABZ0XX_RADIO_ChipSelect</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cmwx1zzabz_0xx.o(.text.CMWX1ZZABZ0XX_RADIO_ChipSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CMWX1ZZABZ0XX_RADIO_ChipSelect
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
</UL>

<P><STRONG><a name="[158]"></a>CMWX1ZZABZ0XX_RADIO_GetDio1PinState</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cmwx1zzabz_0xx.o(.text.CMWX1ZZABZ0XX_RADIO_GetDio1PinState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CMWX1ZZABZ0XX_RADIO_GetDio1PinState
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio1Irq
</UL>

<P><STRONG><a name="[288]"></a>CMWX1ZZABZ0XX_RADIO_GetPaSelect</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cmwx1zzabz_0xx.o(.text.CMWX1ZZABZ0XX_RADIO_GetPaSelect))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
</UL>

<P><STRONG><a name="[283]"></a>CMWX1ZZABZ0XX_RADIO_GetWakeUpTime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cmwx1zzabz_0xx.o(.text.CMWX1ZZABZ0XX_RADIO_GetWakeUpTime))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetWakeupTime
</UL>

<P><STRONG><a name="[15a]"></a>CMWX1ZZABZ0XX_RADIO_IoDeInit</STRONG> (Thumb, 136 bytes, Stack size 64 bytes, cmwx1zzabz_0xx.o(.text.CMWX1ZZABZ0XX_RADIO_IoDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = CMWX1ZZABZ0XX_RADIO_IoDeInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_EnterStopMode
</UL>

<P><STRONG><a name="[15c]"></a>CMWX1ZZABZ0XX_RADIO_IoInit</STRONG> (Thumb, 396 bytes, Stack size 80 bytes, cmwx1zzabz_0xx.o(.text.CMWX1ZZABZ0XX_RADIO_IoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = CMWX1ZZABZ0XX_RADIO_IoInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_ExitStopMode
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemApp_Init
</UL>

<P><STRONG><a name="[15d]"></a>CMWX1ZZABZ0XX_RADIO_IoIrqInit</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, cmwx1zzabz_0xx.o(.text.CMWX1ZZABZ0XX_RADIO_IoIrqInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CMWX1ZZABZ0XX_RADIO_IoIrqInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EXTI_RegisterCallback
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EXTI_GetHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
</UL>

<P><STRONG><a name="[162]"></a>CMWX1ZZABZ0XX_RADIO_Reset</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, cmwx1zzabz_0xx.o(.text.CMWX1ZZABZ0XX_RADIO_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = CMWX1ZZABZ0XX_RADIO_Reset &rArr; HAL_Delay &rArr; RTC_IF_DelayMs &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
</UL>

<P><STRONG><a name="[163]"></a>CMWX1ZZABZ0XX_RADIO_SendRecv</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, cmwx1zzabz_0xx.o(.text.CMWX1ZZABZ0XX_RADIO_SendRecv))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = CMWX1ZZABZ0XX_RADIO_SendRecv &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SPI1_SendRecv
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
</UL>

<P><STRONG><a name="[164]"></a>CMWX1ZZABZ0XX_RADIO_SetAntSw</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, cmwx1zzabz_0xx.o(.text.CMWX1ZZABZ0XX_RADIO_SetAntSw))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CMWX1ZZABZ0XX_RADIO_SetAntSw
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
</UL>

<P><STRONG><a name="[165]"></a>CMWX1ZZABZ0XX_RADIO_SetXO</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, cmwx1zzabz_0xx.o(.text.CMWX1ZZABZ0XX_RADIO_SetXO))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = CMWX1ZZABZ0XX_RADIO_SetXO &rArr; HAL_Delay &rArr; RTC_IF_DelayMs &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetSleep
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
</UL>

<P><STRONG><a name="[169]"></a>DBG_Init</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, sys_debug.o(.text.DBG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = DBG_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DBGMCU_DisableDBGStopMode
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DBGMCU_DisableDBGStandbyMode
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DBGMCU_DisableDBGSleepMode
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemApp_Init
</UL>

<P><STRONG><a name="[23]"></a>DMA1_Channel4_5_6_7_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32l0xx_it.o(.text.DMA1_Channel4_5_6_7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA1_Channel4_5_6_7_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32l0xx_it.o(.text.EXTI0_1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI0_1_IRQHandler &rArr; HAL_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_it.o(.text.EXTI2_3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32l0xx_it.o(.text.EXTI4_15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI4_15_IRQHandler &rArr; HAL_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[28d]"></a>EnvSensors_Read</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, sys_sensors.o(.text.EnvSensors_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EnvSensors_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendTxData
</UL>

<P><STRONG><a name="[100]"></a>Error_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text.Error_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LPUART1_Init
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ReadChannels
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC_Init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>

<P><STRONG><a name="[0]"></a>GetBatteryLevel</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, sys_app.o(.text.GetBatteryLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = GetBatteryLevel &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_GetBatteryLevel
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendTxData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_app.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[175]"></a>GetDevAddr</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, sys_app.o(.text.GetDevAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetDevAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetUIDw2
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetUIDw1
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetUIDw0
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerJoin
</UL>

<P><STRONG><a name="[1]"></a>GetTemperatureLevel</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sys_app.o(.text.GetTemperatureLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = GetTemperatureLevel &rArr; SYS_GetTemperatureLevel &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_GetTemperatureLevel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_app.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[fe]"></a>HAL_ADCEx_Calibration_Start</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, stm32l0xx_hal_adc_ex.o(.text.HAL_ADCEx_Calibration_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_ADCEx_Calibration_Start &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ReadChannels
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC_Init
</UL>

<P><STRONG><a name="[ff]"></a>HAL_ADC_ConfigChannel</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, stm32l0xx_hal_adc.o(.text.HAL_ADC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_ADC_ConfigChannel &rArr; ADC_DelayMicroSecond &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DelayMicroSecond
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ReadChannels
</UL>

<P><STRONG><a name="[105]"></a>HAL_ADC_DeInit</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, stm32l0xx_hal_adc.o(.text.HAL_ADC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_ADC_DeInit &rArr; ADC_Disable &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspDeInit
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Disable
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConversionStop
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ReadChannels
</UL>

<P><STRONG><a name="[104]"></a>HAL_ADC_GetValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l0xx_hal_adc.o(.text.HAL_ADC_GetValue))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ReadChannels
</UL>

<P><STRONG><a name="[17c]"></a>HAL_ADC_Init</STRONG> (Thumb, 408 bytes, Stack size 24 bytes, stm32l0xx_hal_adc.o(.text.HAL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_ADC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC_Init
</UL>

<P><STRONG><a name="[17b]"></a>HAL_ADC_MspDeInit</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, adc.o(.text.HAL_ADC_MspDeInit))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_EnterStopMode
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_DeInit
</UL>

<P><STRONG><a name="[17d]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, adc.o(.text.HAL_ADC_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[102]"></a>HAL_ADC_PollForConversion</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, stm32l0xx_hal_adc.o(.text.HAL_ADC_PollForConversion))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_ADC_PollForConversion &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ReadChannels
</UL>

<P><STRONG><a name="[101]"></a>HAL_ADC_Start</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32l0xx_hal_adc.o(.text.HAL_ADC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_ADC_Start &rArr; ADC_Enable &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ReadChannels
</UL>

<P><STRONG><a name="[103]"></a>HAL_ADC_Stop</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32l0xx_hal_adc.o(.text.HAL_ADC_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_ADC_Stop &rArr; ADC_Disable &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Disable
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConversionStop
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ReadChannels
</UL>

<P><STRONG><a name="[16a]"></a>HAL_DBGMCU_DisableDBGSleepMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_hal.o(.text.HAL_DBGMCU_DisableDBGSleepMode))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_Init
</UL>

<P><STRONG><a name="[16c]"></a>HAL_DBGMCU_DisableDBGStandbyMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_hal.o(.text.HAL_DBGMCU_DisableDBGStandbyMode))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_Init
</UL>

<P><STRONG><a name="[16b]"></a>HAL_DBGMCU_DisableDBGStopMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_hal.o(.text.HAL_DBGMCU_DisableDBGStopMode))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_Init
</UL>

<P><STRONG><a name="[1a5]"></a>HAL_DMA_Abort</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, stm32l0xx_hal_dma.o(.text.HAL_DMA_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_DMA_Abort
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[1a1]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32l0xx_hal_dma.o(.text.HAL_DMA_Abort_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[17e]"></a>HAL_DMA_DeInit</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, stm32l0xx_hal_dma.o(.text.HAL_DMA_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_DMA_DeInit &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
</UL>

<P><STRONG><a name="[16d]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, stm32l0xx_hal_dma.o(.text.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel4_5_6_7_IRQHandler
</UL>

<P><STRONG><a name="[17f]"></a>HAL_DMA_Init</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, stm32l0xx_hal_dma.o(.text.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_DMA_Init &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[180]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, stm32l0xx_hal_dma.o(.text.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
</UL>

<P><STRONG><a name="[155]"></a>HAL_Delay</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, sys_app.o(.text.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_Delay &rArr; RTC_IF_DelayMs &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IF_DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TST_TX_Start
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TST_RxRssi
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_Process
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMWX1ZZABZ0XX_RADIO_SetXO
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMWX1ZZABZ0XX_RADIO_Reset
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Random
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
</UL>

<P><STRONG><a name="[15e]"></a>HAL_EXTI_GetHandle</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l0xx_hal_exti.o(.text.HAL_EXTI_GetHandle))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMWX1ZZABZ0XX_RADIO_IoIrqInit
</UL>

<P><STRONG><a name="[171]"></a>HAL_EXTI_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32l0xx_hal_exti.o(.text.HAL_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_EXTI_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_1_IRQHandler
</UL>

<P><STRONG><a name="[15f]"></a>HAL_EXTI_RegisterCallback</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l0xx_hal_exti.o(.text.HAL_EXTI_RegisterCallback))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMWX1ZZABZ0XX_RADIO_IoIrqInit
</UL>

<P><STRONG><a name="[1ad]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 208 bytes, Stack size 52 bytes, stm32l0xx_hal_gpio.o(.text.HAL_GPIO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
</UL>

<P><STRONG><a name="[3d]"></a>HAL_GPIO_Init</STRONG> (Thumb, 364 bytes, Stack size 52 bytes, stm32l0xx_hal_gpio.o(.text.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_Init
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMWX1ZZABZ0XX_RADIO_IoInit
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMWX1ZZABZ0XX_RADIO_IoDeInit
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMWX1ZZABZ0XX_RADIO_Reset
</UL>
<BR>[Address Reference Count : 3]<UL><LI> cmwx1zzabz_0xx.o(.text.CMWX1ZZABZ0XX_RADIO_IoDeInit)
<LI> sys_app.o(.text.SystemApp_Init)
<LI> cmwx1zzabz_0xx.o(.text.CMWX1ZZABZ0XX_RADIO_IoInit)
</UL>
<P><STRONG><a name="[159]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l0xx_hal_gpio.o(.text.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMWX1ZZABZ0XX_RADIO_GetDio1PinState
</UL>

<P><STRONG><a name="[14b]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l0xx_hal_gpio.o(.text.HAL_GPIO_TogglePin))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Toggle
</UL>

<P><STRONG><a name="[3e]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l0xx_hal_gpio.o(.text.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMWX1ZZABZ0XX_RADIO_IoInit
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_On
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Off
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMWX1ZZABZ0XX_RADIO_SetXO
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMWX1ZZABZ0XX_RADIO_SetAntSw
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMWX1ZZABZ0XX_RADIO_Reset
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMWX1ZZABZ0XX_RADIO_ChipSelect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmwx1zzabz_0xx.o(.text.CMWX1ZZABZ0XX_RADIO_SetAntSw)
</UL>
<P><STRONG><a name="[f7]"></a>HAL_GetTick</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, sys_app.o(.text.HAL_GetTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IF_GetTimerValue
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_StopModeWakeUpSourceConfig
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_DeactivateAlarm
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_PollForConversion
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_Start
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Disable
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConversionStop
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>

<P><STRONG><a name="[176]"></a>HAL_GetUIDw0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l0xx_hal.o(.text.HAL_GetUIDw0))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDevAddr
</UL>

<P><STRONG><a name="[177]"></a>HAL_GetUIDw1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l0xx_hal.o(.text.HAL_GetUIDw1))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDevAddr
</UL>

<P><STRONG><a name="[178]"></a>HAL_GetUIDw2</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l0xx_hal.o(.text.HAL_GetUIDw2))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDevAddr
</UL>

<P><STRONG><a name="[290]"></a>HAL_IncTick</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l0xx_hal.o(.text.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[183]"></a>HAL_Init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32l0xx_hal.o(.text.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Init &rArr; HAL_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[184]"></a>HAL_InitTick</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sys_app.o(.text.HAL_InitTick))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[185]"></a>HAL_MspInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32l0xx_hal_msp.o(.text.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_DisablePVD
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableUltraLowPower
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableFastWakeUp
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[1ae]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32l0xx_hal_cortex.o(.text.HAL_NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_DeInit
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
</UL>

<P><STRONG><a name="[161]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l0xx_hal_cortex.o(.text.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMWX1ZZABZ0XX_RADIO_IoIrqInit
</UL>

<P><STRONG><a name="[160]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32l0xx_hal_cortex.o(.text.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMWX1ZZABZ0XX_RADIO_IoIrqInit
</UL>

<P><STRONG><a name="[188]"></a>HAL_PWREx_EnableFastWakeUp</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l0xx_hal_pwr_ex.o(.text.HAL_PWREx_EnableFastWakeUp))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[187]"></a>HAL_PWREx_EnableUltraLowPower</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l0xx_hal_pwr_ex.o(.text.HAL_PWREx_EnableUltraLowPower))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[186]"></a>HAL_PWR_DisablePVD</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_hal_pwr.o(.text.HAL_PWR_DisablePVD))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[237]"></a>HAL_PWR_EnterSLEEPMode</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32l0xx_hal_pwr.o(.text.HAL_PWR_EnterSLEEPMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PWR_EnterSLEEPMode
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_EnterSleepMode
</UL>

<P><STRONG><a name="[238]"></a>HAL_PWR_EnterSTOPMode</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stm32l0xx_hal_pwr.o(.text.HAL_PWR_EnterSTOPMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PWR_EnterSTOPMode
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_EnterStopMode
</UL>

<P><STRONG><a name="[18a]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 384 bytes, Stack size 48 bytes, stm32l0xx_hal_rcc_ex.o(.text.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IF_Init
</UL>

<P><STRONG><a name="[18b]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 388 bytes, Stack size 32 bytes, stm32l0xx_hal_rcc.o(.text.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[2a4]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l0xx_hal_rcc.o(.text.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[230]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l0xx_hal_rcc.o(.text.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[18c]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, stm32l0xx_hal_rcc.o(.text.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[18d]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1268 bytes, Stack size 56 bytes, stm32l0xx_hal_rcc.o(.text.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[191]"></a>HAL_RTCEx_AlarmBEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_rtc_ex.o(.text.HAL_RTCEx_AlarmBEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmIRQHandler
</UL>

<P><STRONG><a name="[24a]"></a>HAL_RTCEx_BKUPRead</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l0xx_hal_rtc_ex.o(.text.HAL_RTCEx_BKUPRead))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IF_BkUp_Read_SubSeconds
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IF_BkUp_Read_Seconds
</UL>

<P><STRONG><a name="[24b]"></a>HAL_RTCEx_BKUPWrite</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l0xx_hal_rtc_ex.o(.text.HAL_RTCEx_BKUPWrite))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IF_BkUp_Write_SubSeconds
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IF_BkUp_Write_Seconds
</UL>

<P><STRONG><a name="[24d]"></a>HAL_RTCEx_EnableBypassShadow</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32l0xx_hal_rtc_ex.o(.text.HAL_RTCEx_EnableBypassShadow))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IF_Init
</UL>

<P><STRONG><a name="[18e]"></a>HAL_RTC_AlarmAEventCallback</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rtc_if.o(.text.HAL_RTC_AlarmAEventCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_RTC_AlarmAEventCallback &rArr; UTIL_TIMER_IRQ_Handler &rArr; UTIL_TIMER_Start &rArr; TimerInsertNewHeadTimer &rArr; TimerSetTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmIRQHandler
</UL>

<P><STRONG><a name="[190]"></a>HAL_RTC_AlarmIRQHandler</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32l0xx_hal_rtc.o(.text.HAL_RTC_AlarmIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_RTC_AlarmIRQHandler &rArr; HAL_RTC_AlarmAEventCallback &rArr; UTIL_TIMER_IRQ_Handler &rArr; UTIL_TIMER_Start &rArr; TimerInsertNewHeadTimer &rArr; TimerSetTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmAEventCallback
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_AlarmBEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[192]"></a>HAL_RTC_DeactivateAlarm</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, stm32l0xx_hal_rtc.o(.text.HAL_RTC_DeactivateAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_RTC_DeactivateAlarm &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IF_StopTimer
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IF_Init
</UL>

<P><STRONG><a name="[249]"></a>HAL_RTC_GetDate</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, stm32l0xx_hal_rtc.o(.text.HAL_RTC_GetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RTC_GetDate
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetCalendarValue
</UL>

<P><STRONG><a name="[248]"></a>HAL_RTC_GetTime</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, stm32l0xx_hal_rtc.o(.text.HAL_RTC_GetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RTC_GetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetCalendarValue
</UL>

<P><STRONG><a name="[193]"></a>HAL_RTC_Init</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, stm32l0xx_hal_rtc.o(.text.HAL_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_RCC_OscConfig &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[194]"></a>HAL_RTC_MspInit</STRONG> (Thumb, 88 bytes, Stack size 64 bytes, rtc.o(.text.HAL_RTC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = HAL_RTC_MspInit &rArr; HAL_RCC_OscConfig &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[197]"></a>HAL_RTC_SetAlarm_IT</STRONG> (Thumb, 384 bytes, Stack size 48 bytes, stm32l0xx_hal_rtc.o(.text.HAL_RTC_SetAlarm_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HAL_RTC_SetAlarm_IT &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IF_StartTimer
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[198]"></a>HAL_RTC_SetDate</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, stm32l0xx_hal_rtc.o(.text.HAL_RTC_SetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HAL_RTC_SetDate &rArr; RTC_EnterInitMode &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[199]"></a>HAL_RTC_SetTime</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, stm32l0xx_hal_rtc.o(.text.HAL_RTC_SetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HAL_RTC_SetTime &rArr; RTC_EnterInitMode &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[196]"></a>HAL_RTC_WaitForSynchro</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, stm32l0xx_hal_rtc.o(.text.HAL_RTC_WaitForSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_RTC_WaitForSynchro &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[14d]"></a>HAL_SPI_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l0xx_hal_spi.o(.text.HAL_SPI_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SPI1_Init
</UL>

<P><STRONG><a name="[19a]"></a>HAL_SPI_Init</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, stm32l0xx_hal_spi.o(.text.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>

<P><STRONG><a name="[19b]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_spi.o(.text.HAL_SPI_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[150]"></a>HAL_SPI_TransmitReceive</STRONG> (Thumb, 492 bytes, Stack size 48 bytes, stm32l0xx_hal_spi.o(.text.HAL_SPI_TransmitReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SPI1_SendRecv
</UL>

<P><STRONG><a name="[2b2]"></a>HAL_UARTEx_EnableStopMode</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32l0xx_hal_uart_ex.o(.text.HAL_UARTEx_EnableStopMode))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_ReceiveInit
</UL>

<P><STRONG><a name="[1a6]"></a>HAL_UARTEx_RxEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_uart.o(.text.HAL_UARTEx_RxEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT
</UL>

<P><STRONG><a name="[19d]"></a>HAL_UARTEx_StopModeWakeUpSourceConfig</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, stm32l0xx_hal_uart_ex.o(.text.HAL_UARTEx_StopModeWakeUpSourceConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = HAL_UARTEx_StopModeWakeUpSourceConfig &rArr; UART_WaitOnFlagUntilTimeout &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_ReceiveInit
</UL>

<P><STRONG><a name="[1a3]"></a>HAL_UARTEx_WakeupCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_uart_ex.o(.text.HAL_UARTEx_WakeupCallback))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[1a4]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_uart.o(.text.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[19f]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 548 bytes, Stack size 40 bytes, stm32l0xx_hal_uart.o(.text.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_WakeupCallback
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_LPUART1_IRQHandler
</UL>

<P><STRONG><a name="[1a7]"></a>HAL_UART_Init</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, stm32l0xx_hal_uart.o(.text.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LPUART1_Init
</UL>

<P><STRONG><a name="[1ac]"></a>HAL_UART_MspDeInit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, usart.o(.text.HAL_UART_MspDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HAL_UART_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_DeInit
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_DeInit
</UL>

<P><STRONG><a name="[1a8]"></a>HAL_UART_MspInit</STRONG> (Thumb, 220 bytes, Stack size 104 bytes, usart.o(.text.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[1af]"></a>HAL_UART_Receive_IT</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, stm32l0xx_hal_uart.o(.text.HAL_UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_UART_Receive_IT &rArr; UART_Start_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Start_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_ReceiveInit
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[1b1]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, usart_if.o(.text.HAL_UART_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_UART_RxCpltCallback &rArr; HAL_UART_Receive_IT &rArr; UART_Start_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT
</UL>

<P><STRONG><a name="[1b2]"></a>HAL_UART_Transmit_DMA</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, stm32l0xx_hal_uart.o(.text.HAL_UART_Transmit_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Trace_DMA
</UL>

<P><STRONG><a name="[1a2]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usart_if.o(.text.HAL_UART_TxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATransmitCplt
</UL>

<P><STRONG><a name="[2a3]"></a>HAL_UART_TxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_uart.o(.text.HAL_UART_TxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATxHalfCplt
</UL>

<P><STRONG><a name="[14]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l0xx_it.o(.text.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[1bf]"></a>LmHandlerConfigure</STRONG> (Thumb, 324 bytes, Stack size 112 bytes, lmhandler.o(.text.LmHandlerConfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = LmHandlerConfigure &rArr; LoRaMacInitialization &rArr; SecureElementInit &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_MEM_cpy_8
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraInfo_GetPtr
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvmCtxMgmtRestore
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacTestSetDutyCycleOn
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetNetworkID
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetDevAddr
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetActiveRegion
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaWAN_Init
</UL>

<P><STRONG><a name="[12e]"></a>LmHandlerGetActiveRegion</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lmhandler.o(.text.LmHandlerGetActiveRegion))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Region_get
</UL>

<P><STRONG><a name="[10d]"></a>LmHandlerGetAdrEnable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lmhandler.o(.text.LmHandlerGetAdrEnable))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_ADR_get
</UL>

<P><STRONG><a name="[126]"></a>LmHandlerGetAppEUI</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lmhandler.o(.text.LmHandlerGetAppEUI))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LmHandlerGetAppEUI
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_MEM_cpy_8
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_JoinEUI_get
</UL>

<P><STRONG><a name="[11d]"></a>LmHandlerGetBeaconState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lmhandler.o(.text.LmHandlerGetBeaconState))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_DeviceClass_get
</UL>

<P><STRONG><a name="[11c]"></a>LmHandlerGetCurrentClass</STRONG> (Thumb, 38 bytes, Stack size 56 bytes, lmhandler.o(.text.LmHandlerGetCurrentClass))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LmHandlerGetCurrentClass &rArr; LoRaMacMibGetRequestConfirm &rArr; RegionGetPhyParam &rArr; RegionKR920GetPhyParam &rArr; randr &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_DeviceClass_get
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McpsIndication
</UL>

<P><STRONG><a name="[114]"></a>LmHandlerGetDevAddr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lmhandler.o(.text.LmHandlerGetDevAddr))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_DevAddr_get
</UL>

<P><STRONG><a name="[118]"></a>LmHandlerGetDevEUI</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lmhandler.o(.text.LmHandlerGetDevEUI))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LmHandlerGetDevEUI
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_MEM_cpy_8
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_DevEUI_get
</UL>

<P><STRONG><a name="[11f]"></a>LmHandlerGetDutyCycleEnable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lmhandler.o(.text.LmHandlerGetDutyCycleEnable))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_DutyCycle_get
</UL>

<P><STRONG><a name="[121]"></a>LmHandlerGetJoinRx1Delay</STRONG> (Thumb, 40 bytes, Stack size 56 bytes, lmhandler.o(.text.LmHandlerGetJoinRx1Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LmHandlerGetJoinRx1Delay &rArr; LoRaMacMibGetRequestConfirm &rArr; RegionGetPhyParam &rArr; RegionKR920GetPhyParam &rArr; randr &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_JoinAcceptDelay1_get
</UL>

<P><STRONG><a name="[124]"></a>LmHandlerGetJoinRx2Delay</STRONG> (Thumb, 40 bytes, Stack size 56 bytes, lmhandler.o(.text.LmHandlerGetJoinRx2Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LmHandlerGetJoinRx2Delay &rArr; LoRaMacMibGetRequestConfirm &rArr; RegionGetPhyParam &rArr; RegionKR920GetPhyParam &rArr; randr &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_JoinAcceptDelay2_get
</UL>

<P><STRONG><a name="[12a]"></a>LmHandlerGetNetworkID</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lmhandler.o(.text.LmHandlerGetNetworkID))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_NetworkID_get
</UL>

<P><STRONG><a name="[12c]"></a>LmHandlerGetPingPeriodicity</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lmhandler.o(.text.LmHandlerGetPingPeriodicity))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_PingSlot_get
</UL>

<P><STRONG><a name="[132]"></a>LmHandlerGetRX2Params</STRONG> (Thumb, 44 bytes, Stack size 56 bytes, lmhandler.o(.text.LmHandlerGetRX2Params))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LmHandlerGetRX2Params &rArr; LoRaMacMibGetRequestConfirm &rArr; RegionGetPhyParam &rArr; RegionKR920GetPhyParam &rArr; randr &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Rx2Frequency_set
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Rx2Frequency_get
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Rx2DataRate_set
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Rx2DataRate_get
</UL>

<P><STRONG><a name="[130]"></a>LmHandlerGetRx1Delay</STRONG> (Thumb, 40 bytes, Stack size 56 bytes, lmhandler.o(.text.LmHandlerGetRx1Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LmHandlerGetRx1Delay &rArr; LoRaMacMibGetRequestConfirm &rArr; RegionGetPhyParam &rArr; RegionKR920GetPhyParam &rArr; randr &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Rx1Delay_get
</UL>

<P><STRONG><a name="[134]"></a>LmHandlerGetRx2Delay</STRONG> (Thumb, 40 bytes, Stack size 56 bytes, lmhandler.o(.text.LmHandlerGetRx2Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LmHandlerGetRx2Delay &rArr; LoRaMacMibGetRequestConfirm &rArr; RegionGetPhyParam &rArr; RegionKR920GetPhyParam &rArr; randr &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Rx2Delay_get
</UL>

<P><STRONG><a name="[111]"></a>LmHandlerGetTxDatarate</STRONG> (Thumb, 44 bytes, Stack size 56 bytes, lmhandler.o(.text.LmHandlerGetTxDatarate))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LmHandlerGetTxDatarate &rArr; LoRaMacMibGetRequestConfirm &rArr; RegionGetPhyParam &rArr; RegionKR920GetPhyParam &rArr; randr &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_DataRate_get
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MlmeConfirm
</UL>

<P><STRONG><a name="[138]"></a>LmHandlerGetTxPower</STRONG> (Thumb, 40 bytes, Stack size 56 bytes, lmhandler.o(.text.LmHandlerGetTxPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LmHandlerGetTxPower &rArr; LoRaMacMibGetRequestConfirm &rArr; RegionGetPhyParam &rArr; RegionKR920GetPhyParam &rArr; randr &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_TransmitPower_get
</UL>

<P><STRONG><a name="[1c6]"></a>LmHandlerInit</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, lmhandler.o(.text.LmHandlerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LmHandlerInit &rArr; LmHandlerPackageRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_MEM_cpy_8
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerPackageRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaWAN_Init
</UL>

<P><STRONG><a name="[4d]"></a>LmHandlerJoin</STRONG> (Thumb, 148 bytes, Stack size 64 bytes, lmhandler.o(.text.LmHandlerJoin))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = LmHandlerJoin &rArr; LoRaMacMlmeRequest &rArr; ScheduleTx &rArr; LoRaMacCryptoSecureMessage &rArr; SecureElementComputeAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; lorawan_aes_encrypt &rArr; copy_and_key
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDevAddr
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerRequestClass
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacStart
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Join
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Certif
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSend
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaWAN_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmhandler.o(.text.LmHandlerPackageRegister)
</UL>
<P><STRONG><a name="[137]"></a>LmHandlerJoinStatus</STRONG> (Thumb, 32 bytes, Stack size 48 bytes, lmhandler.o(.text.LmHandlerJoinStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LmHandlerJoinStatus &rArr; LoRaMacMibGetRequestConfirm &rArr; RegionGetPhyParam &rArr; RegionKR920GetPhyParam &rArr; randr &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetNetworkID
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetDevAddr
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetAppEUI
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetActiveRegion
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerRequestClass
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Send
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CertifSend
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSend
</UL>

<P><STRONG><a name="[1c7]"></a>LmHandlerPackageRegister</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lmhandler.o(.text.LmHandlerPackageRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LmHandlerPackageRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmphCompliancePackageFactory
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerInit
</UL>

<P><STRONG><a name="[66]"></a>LmHandlerProcess</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lmhandler.o(.text.LmHandlerProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048<LI>Call Chain = LmHandlerProcess &rArr; LoRaMacProcess &rArr; LoRaMacCryptoUnsecureMessage &rArr; SecureElementVerifyAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; lorawan_aes_encrypt &rArr; copy_and_key
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvmCtxMgmtStore
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_app.o(.text.LoRaWAN_Init)
</UL>
<P><STRONG><a name="[11e]"></a>LmHandlerRequestClass</STRONG> (Thumb, 152 bytes, Stack size 56 bytes, lmhandler.o(.text.LmHandlerRequestClass))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = LmHandlerRequestClass &rArr; LoRaMacMibSetRequestConfirm &rArr; LoRaMacCryptoSetKey &rArr; LoRaMacCryptoDeriveMcRootKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_set_key &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerJoinStatus
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayClassUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_DeviceClass_set
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerJoin
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MlmeConfirm
</UL>

<P><STRONG><a name="[4c]"></a>LmHandlerSend</STRONG> (Thumb, 308 bytes, Stack size 56 bytes, lmhandler.o(.text.LmHandlerSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = LmHandlerSend &rArr; LmHandlerJoin &rArr; LoRaMacMlmeRequest &rArr; ScheduleTx &rArr; LoRaMacCryptoSecureMessage &rArr; SecureElementComputeAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; lorawan_aes_encrypt &rArr; copy_and_key
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerJoinStatus
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerJoin
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacQueryTxPossible
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacIsBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Send
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CertifSend
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendTxData
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McpsIndication
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmhandler.o(.text.LmHandlerPackageRegister)
</UL>
<P><STRONG><a name="[12f]"></a>LmHandlerSetActiveRegion</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lmhandler.o(.text.LmHandlerSetActiveRegion))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = LmHandlerSetActiveRegion &rArr; LmHandlerConfigure &rArr; LoRaMacInitialization &rArr; SecureElementInit &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerJoinStatus
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Region_set
</UL>

<P><STRONG><a name="[10f]"></a>LmHandlerSetAdrEnable</STRONG> (Thumb, 40 bytes, Stack size 48 bytes, lmhandler.o(.text.LmHandlerSetAdrEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = LmHandlerSetAdrEnable &rArr; LoRaMacMibSetRequestConfirm &rArr; LoRaMacCryptoSetKey &rArr; LoRaMacCryptoDeriveMcRootKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_set_key &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_ADR_set
</UL>

<P><STRONG><a name="[127]"></a>LmHandlerSetAppEUI</STRONG> (Thumb, 56 bytes, Stack size 56 bytes, lmhandler.o(.text.LmHandlerSetAppEUI))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = LmHandlerSetAppEUI &rArr; LoRaMacMibSetRequestConfirm &rArr; LoRaMacCryptoSetKey &rArr; LoRaMacCryptoDeriveMcRootKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_set_key &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_MEM_cpy_8
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerJoinStatus
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_JoinEUI_set
</UL>

<P><STRONG><a name="[117]"></a>LmHandlerSetDevAddr</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lmhandler.o(.text.LmHandlerSetDevAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = LmHandlerSetDevAddr &rArr; LmHandlerConfigure &rArr; LoRaMacInitialization &rArr; SecureElementInit &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerJoinStatus
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_DevAddr_set
</UL>

<P><STRONG><a name="[11a]"></a>LmHandlerSetDevEUI</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lmhandler.o(.text.LmHandlerSetDevEUI))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_DevEUI_set
</UL>

<P><STRONG><a name="[120]"></a>LmHandlerSetDutyCycleEnable</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lmhandler.o(.text.LmHandlerSetDutyCycleEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LmHandlerSetDutyCycleEnable &rArr; LoRaMacTestSetDutyCycleOn &rArr; RegionVerify &rArr; RegionKR920Verify &rArr; VerifyRfFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacTestSetDutyCycleOn
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_DutyCycle_set
</UL>

<P><STRONG><a name="[123]"></a>LmHandlerSetJoinRx1Delay</STRONG> (Thumb, 30 bytes, Stack size 48 bytes, lmhandler.o(.text.LmHandlerSetJoinRx1Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = LmHandlerSetJoinRx1Delay &rArr; LoRaMacMibSetRequestConfirm &rArr; LoRaMacCryptoSetKey &rArr; LoRaMacCryptoDeriveMcRootKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_set_key &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_JoinAcceptDelay1_set
</UL>

<P><STRONG><a name="[125]"></a>LmHandlerSetJoinRx2Delay</STRONG> (Thumb, 30 bytes, Stack size 48 bytes, lmhandler.o(.text.LmHandlerSetJoinRx2Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = LmHandlerSetJoinRx2Delay &rArr; LoRaMacMibSetRequestConfirm &rArr; LoRaMacCryptoSetKey &rArr; LoRaMacCryptoDeriveMcRootKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_set_key &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_JoinAcceptDelay2_set
</UL>

<P><STRONG><a name="[12b]"></a>LmHandlerSetNetworkID</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lmhandler.o(.text.LmHandlerSetNetworkID))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = LmHandlerSetNetworkID &rArr; LmHandlerConfigure &rArr; LoRaMacInitialization &rArr; SecureElementInit &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerJoinStatus
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_NetworkID_set
</UL>

<P><STRONG><a name="[12d]"></a>LmHandlerSetPingPeriodicity</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lmhandler.o(.text.LmHandlerSetPingPeriodicity))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_PingSlot_set
</UL>

<P><STRONG><a name="[133]"></a>LmHandlerSetRX2Params</STRONG> (Thumb, 36 bytes, Stack size 48 bytes, lmhandler.o(.text.LmHandlerSetRX2Params))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = LmHandlerSetRX2Params &rArr; LoRaMacMibSetRequestConfirm &rArr; LoRaMacCryptoSetKey &rArr; LoRaMacCryptoDeriveMcRootKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_set_key &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Rx2Frequency_set
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Rx2DataRate_set
</UL>

<P><STRONG><a name="[131]"></a>LmHandlerSetRx1Delay</STRONG> (Thumb, 30 bytes, Stack size 48 bytes, lmhandler.o(.text.LmHandlerSetRx1Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = LmHandlerSetRx1Delay &rArr; LoRaMacMibSetRequestConfirm &rArr; LoRaMacCryptoSetKey &rArr; LoRaMacCryptoDeriveMcRootKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_set_key &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Rx1Delay_set
</UL>

<P><STRONG><a name="[135]"></a>LmHandlerSetRx2Delay</STRONG> (Thumb, 30 bytes, Stack size 48 bytes, lmhandler.o(.text.LmHandlerSetRx2Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = LmHandlerSetRx2Delay &rArr; LoRaMacMibSetRequestConfirm &rArr; LoRaMacCryptoSetKey &rArr; LoRaMacCryptoDeriveMcRootKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_set_key &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Rx2Delay_set
</UL>

<P><STRONG><a name="[113]"></a>LmHandlerSetTxDatarate</STRONG> (Thumb, 44 bytes, Stack size 56 bytes, lmhandler.o(.text.LmHandlerSetTxDatarate))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = LmHandlerSetTxDatarate &rArr; LoRaMacMibSetRequestConfirm &rArr; LoRaMacCryptoSetKey &rArr; LoRaMacCryptoDeriveMcRootKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_set_key &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_DataRate_set
</UL>

<P><STRONG><a name="[139]"></a>LmHandlerSetTxPower</STRONG> (Thumb, 30 bytes, Stack size 48 bytes, lmhandler.o(.text.LmHandlerSetTxPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = LmHandlerSetTxPower &rArr; LoRaMacMibSetRequestConfirm &rArr; LoRaMacCryptoSetKey &rArr; LoRaMacCryptoDeriveMcRootKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_set_key &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_TransmitPower_set
</UL>

<P><STRONG><a name="[1c9]"></a>LmphCompliancePackageFactory</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lmhpcompliance.o(.text.LmphCompliancePackageFactory))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerPackageRegister
</UL>

<P><STRONG><a name="[1d0]"></a>LoRaMacAdrCalcNext</STRONG> (Thumb, 216 bytes, Stack size 56 bytes, loramacadr.o(.text.LoRaMacAdrCalcNext))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LoRaMacAdrCalcNext &rArr; RegionGetPhyParam &rArr; RegionKR920GetPhyParam &rArr; randr &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionInitDefaults
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacQueryTxPossible
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
</UL>

<P><STRONG><a name="[246]"></a>LoRaMacClassBBeaconFreqReq</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, loramacclassb.o(.text.LoRaMacClassBBeaconFreqReq))
<BR><BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[1b6]"></a>LoRaMacClassBBeaconTimerEvent</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(.text.LoRaMacClassBBeaconTimerEvent))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRadioRxErrorTimeout
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
</UL>

<P><STRONG><a name="[245]"></a>LoRaMacClassBBeaconTimingAns</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(.text.LoRaMacClassBBeaconTimingAns))
<BR><BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[243]"></a>LoRaMacClassBDeviceTimeAns</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(.text.LoRaMacClassBDeviceTimeAns))
<BR><BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[20a]"></a>LoRaMacClassBGetNvmCtx</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, loramacclassb.o(.text.LoRaMacClassBGetNvmCtx))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>

<P><STRONG><a name="[28c]"></a>LoRaMacClassBHaltBeaconing</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(.text.LoRaMacClassBHaltBeaconing))
<BR><BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[1fe]"></a>LoRaMacClassBInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(.text.LoRaMacClassBInit))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
</UL>

<P><STRONG><a name="[21a]"></a>LoRaMacClassBIsAcquisitionInProgress</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, loramacclassb.o(.text.LoRaMacClassBIsAcquisitionInProgress))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
</UL>

<P><STRONG><a name="[1b4]"></a>LoRaMacClassBIsBeaconExpected</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, loramacclassb.o(.text.LoRaMacClassBIsBeaconExpected))
<BR><BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRadioRxErrorTimeout
</UL>

<P><STRONG><a name="[289]"></a>LoRaMacClassBIsBeaconModeActive</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, loramacclassb.o(.text.LoRaMacClassBIsBeaconModeActive))
<BR><BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[1ba]"></a>LoRaMacClassBIsMulticastExpected</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, loramacclassb.o(.text.LoRaMacClassBIsMulticastExpected))
<BR><BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRadioRxErrorTimeout
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[1b7]"></a>LoRaMacClassBIsPingExpected</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, loramacclassb.o(.text.LoRaMacClassBIsPingExpected))
<BR><BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRadioRxErrorTimeout
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[28a]"></a>LoRaMacClassBIsUplinkCollision</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, loramacclassb.o(.text.LoRaMacClassBIsUplinkCollision))
<BR><BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[205]"></a>LoRaMacClassBMibGetRequestConfirm</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, loramacclassb.o(.text.LoRaMacClassBMibGetRequestConfirm))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>

<P><STRONG><a name="[1bc]"></a>LoRaMacClassBMulticastSlotTimerEvent</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(.text.LoRaMacClassBMulticastSlotTimerEvent))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRadioRxErrorTimeout
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[244]"></a>LoRaMacClassBPingSlotChannelReq</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, loramacclassb.o(.text.LoRaMacClassBPingSlotChannelReq))
<BR><BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[23d]"></a>LoRaMacClassBPingSlotInfoAns</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(.text.LoRaMacClassBPingSlotInfoAns))
<BR><BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[1b9]"></a>LoRaMacClassBPingSlotTimerEvent</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(.text.LoRaMacClassBPingSlotTimerEvent))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRadioRxErrorTimeout
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[220]"></a>LoRaMacClassBProcess</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(.text.LoRaMacClassBProcess))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[215]"></a>LoRaMacClassBRestoreNvmCtx</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, loramacclassb.o(.text.LoRaMacClassBRestoreNvmCtx))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>

<P><STRONG><a name="[222]"></a>LoRaMacClassBResumeBeaconing</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(.text.LoRaMacClassBResumeBeaconing))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[21e]"></a>LoRaMacClassBRxBeacon</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, loramacclassb.o(.text.LoRaMacClassBRxBeacon))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[1b5]"></a>LoRaMacClassBSetBeaconState</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(.text.LoRaMacClassBSetBeaconState))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRadioRxErrorTimeout
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
</UL>

<P><STRONG><a name="[1bb]"></a>LoRaMacClassBSetMulticastSlotState</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(.text.LoRaMacClassBSetMulticastSlotState))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRadioRxErrorTimeout
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[21b]"></a>LoRaMacClassBSetPingSlotInfo</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(.text.LoRaMacClassBSetPingSlotInfo))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
</UL>

<P><STRONG><a name="[1b8]"></a>LoRaMacClassBSetPingSlotState</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(.text.LoRaMacClassBSetPingSlotState))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRadioRxErrorTimeout
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[28b]"></a>LoRaMacClassBStopRxSlots</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(.text.LoRaMacClassBStopRxSlots))
<BR><BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[28f]"></a>LoRaMacClassBSwitchClass</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, loramacclassb.o(.text.LoRaMacClassBSwitchClass))
<BR><BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchClass
</UL>

<P><STRONG><a name="[1d2]"></a>LoRaMacCommandsAddCmd</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, loramaccommands.o(.text.LoRaMacCommandsAddCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LoRaMacCommandsAddCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
</UL>

<P><STRONG><a name="[23a]"></a>LoRaMacCommandsGetCmdSize</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, loramaccommands.o(.text.LoRaMacCommandsGetCmdSize))
<BR><BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[209]"></a>LoRaMacCommandsGetNvmCtx</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, loramaccommands.o(.text.LoRaMacCommandsGetNvmCtx))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>

<P><STRONG><a name="[201]"></a>LoRaMacCommandsGetSizeSerializedCmds</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, loramaccommands.o(.text.LoRaMacCommandsGetSizeSerializedCmds))
<BR><BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacQueryTxPossible
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
</UL>

<P><STRONG><a name="[1d3]"></a>LoRaMacCommandsInit</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, loramaccommands.o(.text.LoRaMacCommandsInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LoRaMacCommandsInit
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
</UL>

<P><STRONG><a name="[1d4]"></a>LoRaMacCommandsRemoveCmd</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, loramaccommands.o(.text.LoRaMacCommandsRemoveCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LoRaMacCommandsRemoveCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsSerializeCmds
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsRemoveStickyAnsCmds
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsRemoveNoneStickyCmds
</UL>

<P><STRONG><a name="[1d5]"></a>LoRaMacCommandsRemoveNoneStickyCmds</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, loramaccommands.o(.text.LoRaMacCommandsRemoveNoneStickyCmds))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LoRaMacCommandsRemoveNoneStickyCmds &rArr; LoRaMacCommandsRemoveCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsRemoveCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
</UL>

<P><STRONG><a name="[1d6]"></a>LoRaMacCommandsRemoveStickyAnsCmds</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, loramaccommands.o(.text.LoRaMacCommandsRemoveStickyAnsCmds))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LoRaMacCommandsRemoveStickyAnsCmds &rArr; LoRaMacCommandsRemoveCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsRemoveCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[1d7]"></a>LoRaMacCommandsRestoreNvmCtx</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, loramaccommands.o(.text.LoRaMacCommandsRestoreNvmCtx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LoRaMacCommandsRestoreNvmCtx
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>

<P><STRONG><a name="[1d8]"></a>LoRaMacCommandsSerializeCmds</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, loramaccommands.o(.text.LoRaMacCommandsSerializeCmds))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LoRaMacCommandsSerializeCmds &rArr; LoRaMacCommandsRemoveCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsRemoveCmd
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
</UL>

<P><STRONG><a name="[223]"></a>LoRaMacCommandsStickyCmdsPending</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, loramaccommands.o(.text.LoRaMacCommandsStickyCmdsPending))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[1dd]"></a>LoRaMacConfirmQueueAdd</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, loramacconfirmqueue.o(.text.LoRaMacConfirmQueueAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LoRaMacConfirmQueueAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueHandleCb
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
</UL>

<P><STRONG><a name="[217]"></a>LoRaMacConfirmQueueGetCnt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, loramacconfirmqueue.o(.text.LoRaMacConfirmQueueGetCnt))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
</UL>

<P><STRONG><a name="[20b]"></a>LoRaMacConfirmQueueGetNvmCtx</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, loramacconfirmqueue.o(.text.LoRaMacConfirmQueueGetNvmCtx))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>

<P><STRONG><a name="[1d9]"></a>LoRaMacConfirmQueueGetStatus</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, loramacconfirmqueue.o(.text.LoRaMacConfirmQueueGetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LoRaMacConfirmQueueGetStatus &rArr; GetElement
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetElement
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[1db]"></a>LoRaMacConfirmQueueHandleCb</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, loramacconfirmqueue.o(.text.LoRaMacConfirmQueueHandleCb))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LoRaMacConfirmQueueHandleCb &rArr; LoRaMacConfirmQueueRemoveFirst
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueRemoveFirst
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[1de]"></a>LoRaMacConfirmQueueInit</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, loramacconfirmqueue.o(.text.LoRaMacConfirmQueueInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LoRaMacConfirmQueueInit
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
</UL>

<P><STRONG><a name="[1df]"></a>LoRaMacConfirmQueueIsCmdActive</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, loramacconfirmqueue.o(.text.LoRaMacConfirmQueueIsCmdActive))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LoRaMacConfirmQueueIsCmdActive &rArr; GetElement
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetElement
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[216]"></a>LoRaMacConfirmQueueIsFull</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, loramacconfirmqueue.o(.text.LoRaMacConfirmQueueIsFull))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
</UL>

<P><STRONG><a name="[1dc]"></a>LoRaMacConfirmQueueRemoveFirst</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, loramacconfirmqueue.o(.text.LoRaMacConfirmQueueRemoveFirst))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LoRaMacConfirmQueueRemoveFirst
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueHandleCb
</UL>

<P><STRONG><a name="[1e0]"></a>LoRaMacConfirmQueueRestoreNvmCtx</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, loramacconfirmqueue.o(.text.LoRaMacConfirmQueueRestoreNvmCtx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LoRaMacConfirmQueueRestoreNvmCtx
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>

<P><STRONG><a name="[1e1]"></a>LoRaMacConfirmQueueSetStatus</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, loramacconfirmqueue.o(.text.LoRaMacConfirmQueueSetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LoRaMacConfirmQueueSetStatus &rArr; GetElement
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetElement
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[1bd]"></a>LoRaMacConfirmQueueSetStatusCmn</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, loramacconfirmqueue.o(.text.LoRaMacConfirmQueueSetStatusCmn))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LoRaMacConfirmQueueSetStatusCmn
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxDelayedTimerEvent
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRadioRxErrorTimeout
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[1e2]"></a>LoRaMacCryptoDeriveMcKEKey</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, loramaccrypto.o(.text.LoRaMacCryptoDeriveMcKEKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = LoRaMacCryptoDeriveMcKEKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_set_key &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementDeriveAndStoreKey
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoSetKey
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoHandleJoinAccept
</UL>

<P><STRONG><a name="[1e3]"></a>LoRaMacCryptoDeriveMcRootKey</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, loramaccrypto.o(.text.LoRaMacCryptoDeriveMcRootKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = LoRaMacCryptoDeriveMcRootKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_set_key &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementDeriveAndStoreKey
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoSetKey
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoHandleJoinAccept
</UL>

<P><STRONG><a name="[1e4]"></a>LoRaMacCryptoGetFCntDown</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, loramaccrypto.o(.text.LoRaMacCryptoGetFCntDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LoRaMacCryptoGetFCntDown
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLastFcntDown
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[200]"></a>LoRaMacCryptoGetFCntUp</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, loramaccrypto.o(.text.LoRaMacCryptoGetFCntUp))
<BR><BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
</UL>

<P><STRONG><a name="[206]"></a>LoRaMacCryptoGetNvmCtx</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, loramaccrypto.o(.text.LoRaMacCryptoGetNvmCtx))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>

<P><STRONG><a name="[1e6]"></a>LoRaMacCryptoHandleJoinAccept</STRONG> (Thumb, 180 bytes, Stack size 72 bytes, loramaccrypto.o(.text.LoRaMacCryptoHandleJoinAccept))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = LoRaMacCryptoHandleJoinAccept &rArr; SecureElementProcessJoinAccept &rArr; SecureElementVerifyAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; lorawan_aes_encrypt &rArr; copy_and_key
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacParserJoinAccept
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoDeriveMcRootKey
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoDeriveMcKEKey
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeriveSessionKey10x
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementProcessJoinAccept
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[1e9]"></a>LoRaMacCryptoInit</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, loramaccrypto.o(.text.LoRaMacCryptoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LoRaMacCryptoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
</UL>

<P><STRONG><a name="[1ea]"></a>LoRaMacCryptoPrepareJoinRequest</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, loramaccrypto.o(.text.LoRaMacCryptoPrepareJoinRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = LoRaMacCryptoPrepareJoinRequest &rArr; SecureElementComputeAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; lorawan_aes_encrypt &rArr; copy_and_key
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacSerializerJoinRequest
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementRandomNumber
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementComputeAesCmac
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[1ee]"></a>LoRaMacCryptoRestoreNvmCtx</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, loramaccrypto.o(.text.LoRaMacCryptoRestoreNvmCtx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LoRaMacCryptoRestoreNvmCtx
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>

<P><STRONG><a name="[1ef]"></a>LoRaMacCryptoSecureMessage</STRONG> (Thumb, 216 bytes, Stack size 56 bytes, loramaccrypto.o(.text.LoRaMacCryptoSecureMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = LoRaMacCryptoSecureMessage &rArr; SecureElementComputeAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; lorawan_aes_encrypt &rArr; copy_and_key
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PayloadEncrypt
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacSerializerData
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementComputeAesCmac
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[1f2]"></a>LoRaMacCryptoSetKey</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, loramaccrypto.o(.text.LoRaMacCryptoSetKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = LoRaMacCryptoSetKey &rArr; LoRaMacCryptoDeriveMcRootKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_set_key &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoDeriveMcRootKey
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoDeriveMcKEKey
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementSetKey
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>

<P><STRONG><a name="[214]"></a>LoRaMacCryptoSetLrWanVersion</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, loramaccrypto.o(.text.LoRaMacCryptoSetLrWanVersion))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>

<P><STRONG><a name="[1fc]"></a>LoRaMacCryptoSetMulticastReference</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, loramaccrypto.o(.text.LoRaMacCryptoSetMulticastReference))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
</UL>

<P><STRONG><a name="[1f4]"></a>LoRaMacCryptoUnsecureMessage</STRONG> (Thumb, 324 bytes, Stack size 352 bytes, loramaccrypto.o(.text.LoRaMacCryptoUnsecureMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = LoRaMacCryptoUnsecureMessage &rArr; SecureElementVerifyAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; lorawan_aes_encrypt &rArr; copy_and_key
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PayloadEncrypt
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLastFcntDown
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyAddrItem
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacParserData
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementVerifyAesCmac
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[1c1]"></a>LoRaMacInitialization</STRONG> (Thumb, 916 bytes, Stack size 112 bytes, loramac.o(.text.LoRaMacInitialization))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = LoRaMacInitialization &rArr; SecureElementInit &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand1
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeGetMcuTime
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIsActive
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionInitDefaults
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoSetMulticastReference
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoInit
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueInit
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsInit
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBInit
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetMacParameters
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementInit
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerConfigure
</UL>

<P><STRONG><a name="[1cc]"></a>LoRaMacIsBusy</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, loramac.o(.text.LoRaMacIsBusy))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSend
</UL>

<P><STRONG><a name="[1ce]"></a>LoRaMacMcpsRequest</STRONG> (Thumb, 916 bytes, Stack size 120 bytes, loramac.o(.text.LoRaMacMcpsRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = LoRaMacMcpsRequest &rArr; ScheduleTx &rArr; LoRaMacCryptoSecureMessage &rArr; SecureElementComputeAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; lorawan_aes_encrypt &rArr; copy_and_key
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionVerify
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoGetFCntUp
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsSerializeCmds
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsRemoveNoneStickyCmds
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsGetSizeSerializedCmds
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacAdrCalcNext
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMaxAppPayloadWithoutFOptsLength
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventMacNvmCtxChanged
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSend
</UL>

<P><STRONG><a name="[210]"></a>LoRaMacMibClassBSetRequestConfirm</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, loramacclassb.o(.text.LoRaMacMibClassBSetRequestConfirm))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>

<P><STRONG><a name="[1c3]"></a>LoRaMacMibGetRequestConfirm</STRONG> (Thumb, 560 bytes, Stack size 32 bytes, loramac.o(.text.LoRaMacMibGetRequestConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LoRaMacMibGetRequestConfirm &rArr; RegionGetPhyParam &rArr; RegionKR920GetPhyParam &rArr; randr &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetVersion
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetNvmCtx
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoGetNvmCtx
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueGetNvmCtx
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsGetNvmCtx
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBMibGetRequestConfirm
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBGetNvmCtx
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementGetNvmCtx
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementGetJoinEui
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementGetDevEui
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerRequestClass
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerJoinStatus
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetTxPower
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetTxDatarate
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetRx2Delay
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetRx1Delay
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetRX2Params
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetJoinRx2Delay
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetJoinRx1Delay
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetCurrentClass
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerConfigure
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MlmeConfirm
</UL>

<P><STRONG><a name="[4a]"></a>LoRaMacMibSetRequestConfirm</STRONG> (Thumb, 1108 bytes, Stack size 32 bytes, loramac.o(.text.LoRaMacMibSetRequestConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = LoRaMacMibSetRequestConfirm &rArr; LoRaMacCryptoSetKey &rArr; LoRaMacCryptoDeriveMcRootKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_set_key &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionVerify
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionInitDefaults
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionChanMaskSet
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibClassBSetRequestConfirm
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoSetLrWanVersion
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoSetKey
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoRestoreNvmCtx
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueRestoreNvmCtx
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsRestoreNvmCtx
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBRestoreNvmCtx
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchClass
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenContinuousRxCWindow
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRegionNvmCtxChanged
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventMacNvmCtxChanged
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementSetJoinEui
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementSetDevEui
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementRestoreNvmCtx
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetTxPower
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetTxDatarate
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetRx2Delay
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetRx1Delay
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetRX2Params
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetJoinRx2Delay
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetJoinRx1Delay
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetAppEUI
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetAdrEnable
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerRequestClass
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerJoin
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpComplianceOnMcpsIndication
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmhandler.o(.text.LmHandlerJoin)
</UL>
<P><STRONG><a name="[1c5]"></a>LoRaMacMlmeRequest</STRONG> (Thumb, 544 bytes, Stack size 56 bytes, loramac.o(.text.LoRaMacMlmeRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = LoRaMacMlmeRequest &rArr; ScheduleTx &rArr; LoRaMacCryptoSecureMessage &rArr; SecureElementComputeAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; lorawan_aes_encrypt &rArr; copy_and_key
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionSetContinuousWave
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAlternateDr
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueIsFull
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueGetCnt
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueAdd
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsAddCmd
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBSetPingSlotInfo
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBSetBeaconState
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBIsAcquisitionInProgress
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBBeaconTimerEvent
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchClass
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetMacParameters
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventMacNvmCtxChanged
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementGetJoinEui
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementGetDevEui
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerJoin
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpComplianceOnMcpsIndication
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerDeviceTimeReq
</UL>

<P><STRONG><a name="[1f5]"></a>LoRaMacParserData</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, loramacparser.o(.text.LoRaMacParserData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LoRaMacParserData
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoUnsecureMessage
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[1e8]"></a>LoRaMacParserJoinAccept</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, loramacparser.o(.text.LoRaMacParserJoinAccept))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LoRaMacParserJoinAccept
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoHandleJoinAccept
</UL>

<P><STRONG><a name="[1ca]"></a>LoRaMacProcess</STRONG> (Thumb, 2576 bytes, Stack size 176 bytes, loramac.o(.text.LoRaMacProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032<LI>Call Chain = LoRaMacProcess &rArr; LoRaMacCryptoUnsecureMessage &rArr; SecureElementVerifyAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; lorawan_aes_encrypt &rArr; copy_and_key
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Stop
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Start
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_SetPeriod
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeSub
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeGetMcuTime
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionSetBandTxDone
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionInitDefaults
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionApplyCFList
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacParserData
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoUnsecureMessage
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoHandleJoinAccept
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoGetFCntDown
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueSetStatusCmn
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueSetStatus
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueIsCmdActive
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueHandleCb
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueGetStatus
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueGetCnt
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsStickyCmdsPending
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsRemoveStickyAnsCmds
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBSetPingSlotState
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBSetMulticastSlotState
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBRxBeacon
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBResumeBeaconing
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBProcess
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBPingSlotTimerEvent
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBMulticastSlotTimerEvent
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBIsPingExpected
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBIsMulticastExpected
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopRetransmission
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareRxDoneAbort
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenContinuousRxCWindow
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxDelayedTimerEvent
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnAckTimeoutTimerEvent
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRadioRxErrorTimeout
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementGetJoinEui
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerProcess
</UL>

<P><STRONG><a name="[1cd]"></a>LoRaMacQueryTxPossible</STRONG> (Thumb, 184 bytes, Stack size 72 bytes, loramac.o(.text.LoRaMacQueryTxPossible))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LoRaMacQueryTxPossible &rArr; LoRaMacAdrCalcNext &rArr; RegionGetPhyParam &rArr; RegionKR920GetPhyParam &rArr; randr &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsGetSizeSerializedCmds
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacAdrCalcNext
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMaxAppPayloadWithoutFOptsLength
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSend
</UL>

<P><STRONG><a name="[1f1]"></a>LoRaMacSerializerData</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, loramacserializer.o(.text.LoRaMacSerializerData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LoRaMacSerializerData
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoSecureMessage
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[1ec]"></a>LoRaMacSerializerJoinRequest</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, loramacserializer.o(.text.LoRaMacSerializerJoinRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LoRaMacSerializerJoinRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpyr
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoPrepareJoinRequest
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[1c8]"></a>LoRaMacStart</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, loramac.o(.text.LoRaMacStart))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerJoin
</UL>

<P><STRONG><a name="[1c4]"></a>LoRaMacTestSetDutyCycleOn</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, loramac.o(.text.LoRaMacTestSetDutyCycleOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LoRaMacTestSetDutyCycleOn &rArr; RegionVerify &rArr; RegionKR920Verify &rArr; VerifyRfFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionVerify
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetDutyCycleEnable
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerConfigure
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpComplianceOnMcpsIndication
</UL>

<P><STRONG><a name="[227]"></a>LoRaWAN_Init</STRONG> (Thumb, 260 bytes, Stack size 48 bytes, lora_app.o(.text.LoRaWAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = LoRaWAN_Init &rArr; LmHandlerJoin &rArr; LoRaMacMlmeRequest &rArr; ScheduleTx &rArr; LoRaMacCryptoSecureMessage &rArr; SecureElementComputeAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; lorawan_aes_encrypt &rArr; copy_and_key
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Start
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraInfo_Init
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerJoin
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerInit
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerConfigure
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LoRaWAN_Init
</UL>

<P><STRONG><a name="[11b]"></a>LoraInfo_GetPtr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lora_info.o(.text.LoraInfo_GetPtr))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_DeviceClass_set
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_DeviceClass_get
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerConfigure
</UL>

<P><STRONG><a name="[228]"></a>LoraInfo_Init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lora_info.o(.text.LoraInfo_Init))
<BR><BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaWAN_Init
</UL>

<P><STRONG><a name="[fd]"></a>MX_ADC_Init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, adc.o(.text.MX_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = MX_ADC_Init &rArr; HAL_ADCEx_Calibration_Start &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_Start
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ReadChannels
</UL>

<P><STRONG><a name="[229]"></a>MX_DMA_Init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, dma.o(.text.MX_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MX_DMA_Init &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Init
</UL>

<P><STRONG><a name="[22a]"></a>MX_LPUART1_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, usart.o(.text.MX_LPUART1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = MX_LPUART1_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Init
</UL>

<P><STRONG><a name="[22b]"></a>MX_LoRaWAN_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, app_lorawan.o(.text.MX_LoRaWAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = MX_LoRaWAN_Init &rArr; LoRaWAN_Init &rArr; LmHandlerJoin &rArr; LoRaMacMlmeRequest &rArr; ScheduleTx &rArr; LoRaMacCryptoSecureMessage &rArr; SecureElementComputeAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; lorawan_aes_encrypt &rArr; copy_and_key
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemApp_Init
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaWAN_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[22d]"></a>MX_LoRaWAN_Process</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, app_lorawan.o(.text.MX_LoRaWAN_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MX_LoRaWAN_Process &rArr; UTIL_SEQ_Run &rArr; UTIL_SEQ_Idle &rArr; UTIL_LPM_EnterLowPower
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_Run
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[22f]"></a>MX_RTC_Init</STRONG> (Thumb, 164 bytes, Stack size 72 bytes, rtc.o(.text.MX_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = MX_RTC_Init &rArr; HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_RCC_OscConfig &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IF_Init
</UL>

<P><STRONG><a name="[14e]"></a>MX_SPI1_Init</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, b_l072z_lrwan1_bus.o(.text.MX_SPI1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MX_SPI1_Init &rArr; HAL_SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SPI1_Init
</UL>

<P><STRONG><a name="[13]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_it.o(.text.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>NvmCtxMgmtEvent</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nvmctxmgmt.o(.text.NvmCtxMgmtEvent))
<BR>[Address Reference Count : 1]<UL><LI> lmhandler.o(.text.LmHandlerInit)
</UL>
<P><STRONG><a name="[1c2]"></a>NvmCtxMgmtRestore</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nvmctxmgmt.o(.text.NvmCtxMgmtRestore))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerConfigure
</UL>

<P><STRONG><a name="[1cb]"></a>NvmCtxMgmtStore</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nvmctxmgmt.o(.text.NvmCtxMgmtStore))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerProcess
</UL>

<P><STRONG><a name="[71]"></a>OnRxDone</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, test_rf.o(.text.OnRxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OnRxDone
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_SetEvt
</UL>
<BR>[Address Reference Count : 2]<UL><LI> test_rf.o(.text.TST_TX_Start)
<LI> test_rf.o(.text.TST_RX_Start)
</UL>
<P><STRONG><a name="[73]"></a>OnRxError</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, test_rf.o(.text.OnRxError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OnRxError
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_SetEvt
</UL>
<BR>[Address Reference Count : 2]<UL><LI> test_rf.o(.text.TST_TX_Start)
<LI> test_rf.o(.text.TST_RX_Start)
</UL>
<P><STRONG><a name="[74]"></a>OnRxTimeout</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, test_rf.o(.text.OnRxTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OnRxTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_SetEvt
</UL>
<BR>[Address Reference Count : 2]<UL><LI> test_rf.o(.text.TST_TX_Start)
<LI> test_rf.o(.text.TST_RX_Start)
</UL>
<P><STRONG><a name="[72]"></a>OnTxDone</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, test_rf.o(.text.OnTxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OnTxDone
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_SetEvt
</UL>
<BR>[Address Reference Count : 2]<UL><LI> test_rf.o(.text.TST_TX_Start)
<LI> test_rf.o(.text.TST_RX_Start)
</UL>
<P><STRONG><a name="[75]"></a>OnTxTimeout</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, test_rf.o(.text.OnTxTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OnTxTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_SetEvt
</UL>
<BR>[Address Reference Count : 2]<UL><LI> test_rf.o(.text.TST_TX_Start)
<LI> test_rf.o(.text.TST_RX_Start)
</UL>
<P><STRONG><a name="[c7]"></a>PWR_EnterOffMode</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32_lpm_if.o(.text.PWR_EnterOffMode))
<BR>[Address Reference Count : 1]<UL><LI> stm32_lpm_if.o(.rodata.UTIL_PowerDriver)
</UL>
<P><STRONG><a name="[c3]"></a>PWR_EnterSleepMode</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32_lpm_if.o(.text.PWR_EnterSleepMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PWR_EnterSleepMode &rArr; HAL_PWR_EnterSLEEPMode
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnterSLEEPMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32_lpm_if.o(.rodata.UTIL_PowerDriver)
</UL>
<P><STRONG><a name="[c5]"></a>PWR_EnterStopMode</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32_lpm_if.o(.text.PWR_EnterStopMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = PWR_EnterStopMode &rArr; CMWX1ZZABZ0XX_RADIO_IoDeInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnterSTOPMode
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMWX1ZZABZ0XX_RADIO_IoDeInit
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspDeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32_lpm_if.o(.rodata.UTIL_PowerDriver)
</UL>
<P><STRONG><a name="[c8]"></a>PWR_ExitOffMode</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32_lpm_if.o(.text.PWR_ExitOffMode))
<BR>[Address Reference Count : 1]<UL><LI> stm32_lpm_if.o(.rodata.UTIL_PowerDriver)
</UL>
<P><STRONG><a name="[c4]"></a>PWR_ExitSleepMode</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32_lpm_if.o(.text.PWR_ExitSleepMode))
<BR>[Address Reference Count : 1]<UL><LI> stm32_lpm_if.o(.rodata.UTIL_PowerDriver)
</UL>
<P><STRONG><a name="[c6]"></a>PWR_ExitStopMode</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, stm32_lpm_if.o(.text.PWR_ExitStopMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = PWR_ExitStopMode &rArr; CMWX1ZZABZ0XX_RADIO_IoInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMWX1ZZABZ0XX_RADIO_IoInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32_lpm_if.o(.rodata.UTIL_PowerDriver)
</UL>
<P><STRONG><a name="[16]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_it.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>RNG_LPUART1_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32l0xx_it.o(.text.RNG_LPUART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RNG_LPUART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>RTC_ByteToBcd2</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, stm32l0xx_hal_rtc.o(.text.RTC_ByteToBcd2))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RTC_ByteToBcd2 &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l0xx_hal_rtc.o(.text.HAL_RTC_SetTime)
</UL>
<P><STRONG><a name="[195]"></a>RTC_EnterInitMode</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, stm32l0xx_hal_rtc.o(.text.RTC_EnterInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = RTC_EnterInitMode &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[ca]"></a>RTC_IF_BkUp_Read_Seconds</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rtc_if.o(.text.RTC_IF_BkUp_Read_Seconds))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_IF_BkUp_Read_Seconds
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_BKUPRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc_if.o(.rodata.UTIL_SYSTIMDriver)
</UL>
<P><STRONG><a name="[cc]"></a>RTC_IF_BkUp_Read_SubSeconds</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rtc_if.o(.text.RTC_IF_BkUp_Read_SubSeconds))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_IF_BkUp_Read_SubSeconds
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_BKUPRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc_if.o(.rodata.UTIL_SYSTIMDriver)
</UL>
<P><STRONG><a name="[c9]"></a>RTC_IF_BkUp_Write_Seconds</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtc_if.o(.text.RTC_IF_BkUp_Write_Seconds))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_IF_BkUp_Write_Seconds
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_BKUPWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc_if.o(.rodata.UTIL_SYSTIMDriver)
</UL>
<P><STRONG><a name="[cb]"></a>RTC_IF_BkUp_Write_SubSeconds</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtc_if.o(.text.RTC_IF_BkUp_Write_SubSeconds))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_IF_BkUp_Write_SubSeconds
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_BKUPWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc_if.o(.rodata.UTIL_SYSTIMDriver)
</UL>
<P><STRONG><a name="[d7]"></a>RTC_IF_Convert_Tick2ms</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtc_if.o(.text.RTC_IF_Convert_Tick2ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RTC_IF_Convert_Tick2ms &rArr; __aeabi_lmul
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc_if.o(.rodata.UTIL_TimerDriver)
</UL>
<P><STRONG><a name="[d6]"></a>RTC_IF_Convert_ms2Tick</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rtc_if.o(.text.RTC_IF_Convert_ms2Tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RTC_IF_Convert_ms2Tick &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc_if.o(.rodata.UTIL_TimerDriver)
</UL>
<P><STRONG><a name="[182]"></a>RTC_IF_DelayMs</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, rtc_if.o(.text.RTC_IF_DelayMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = RTC_IF_DelayMs &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IF_GetTimerValue
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>

<P><STRONG><a name="[d5]"></a>RTC_IF_GetMinimumTimeout</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rtc_if.o(.text.RTC_IF_GetMinimumTimeout))
<BR>[Address Reference Count : 1]<UL><LI> rtc_if.o(.rodata.UTIL_TimerDriver)
</UL>
<P><STRONG><a name="[cd]"></a>RTC_IF_GetTime</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, rtc_if.o(.text.RTC_IF_GetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = RTC_IF_GetTime &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetCalendarValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc_if.o(.rodata.UTIL_SYSTIMDriver)
</UL>
<P><STRONG><a name="[d2]"></a>RTC_IF_GetTimerContext</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtc_if.o(.text.RTC_IF_GetTimerContext))
<BR>[Address Reference Count : 1]<UL><LI> rtc_if.o(.rodata.UTIL_TimerDriver)
</UL>
<P><STRONG><a name="[d3]"></a>RTC_IF_GetTimerElapsedTime</STRONG> (Thumb, 20 bytes, Stack size 32 bytes, rtc_if.o(.text.RTC_IF_GetTimerElapsedTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = RTC_IF_GetTimerElapsedTime &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetCalendarValue
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IF_StartTimer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc_if.o(.rodata.UTIL_TimerDriver)
</UL>
<P><STRONG><a name="[d4]"></a>RTC_IF_GetTimerValue</STRONG> (Thumb, 28 bytes, Stack size 32 bytes, rtc_if.o(.text.RTC_IF_GetTimerValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetCalendarValue
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IF_DelayMs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc_if.o(.rodata.UTIL_TimerDriver)
</UL>
<P><STRONG><a name="[ce]"></a>RTC_IF_Init</STRONG> (Thumb, 68 bytes, Stack size 56 bytes, rtc_if.o(.text.RTC_IF_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = RTC_IF_Init &rArr; MX_RTC_Init &rArr; HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_RCC_OscConfig &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IF_SetTimerContext
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_DeactivateAlarm
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_EnableBypassShadow
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc_if.o(.rodata.UTIL_TimerDriver)
</UL>
<P><STRONG><a name="[d1]"></a>RTC_IF_SetTimerContext</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtc_if.o(.text.RTC_IF_SetTimerContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RTC_IF_SetTimerContext &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetCalendarValue
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IF_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc_if.o(.rodata.UTIL_TimerDriver)
</UL>
<P><STRONG><a name="[cf]"></a>RTC_IF_StartTimer</STRONG> (Thumb, 368 bytes, Stack size 64 bytes, rtc_if.o(.text.RTC_IF_StartTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = RTC_IF_StartTimer &rArr; HAL_RTC_SetAlarm_IT &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_LPM_SetStopMode
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_LPM_GetMode
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IF_StopTimer
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IF_GetTimerElapsedTime
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc_if.o(.rodata.UTIL_TimerDriver)
</UL>
<P><STRONG><a name="[d0]"></a>RTC_IF_StopTimer</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, rtc_if.o(.text.RTC_IF_StopTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = RTC_IF_StopTimer &rArr; HAL_RTC_DeactivateAlarm &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_DeactivateAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IF_StartTimer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc_if.o(.rodata.UTIL_TimerDriver)
</UL>
<P><STRONG><a name="[1a]"></a>RTC_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32l0xx_it.o(.text.RTC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = RTC_IRQHandler &rArr; HAL_RTC_AlarmIRQHandler &rArr; HAL_RTC_AlarmAEventCallback &rArr; UTIL_TIMER_IRQ_Handler &rArr; UTIL_TIMER_Start &rArr; TimerInsertNewHeadTimer &rArr; TimerSetTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[218]"></a>RegionAlternateDr</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, region.o(.text.RegionAlternateDr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RegionAlternateDr
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920AlternateDr
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
</UL>

<P><STRONG><a name="[224]"></a>RegionApplyCFList</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, region.o(.text.RegionApplyCFList))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = RegionApplyCFList &rArr; RegionKR920ApplyCFList &rArr; RegionKR920ChannelAdd &rArr; VerifyRfFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920ApplyCFList
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[252]"></a>RegionApplyDrOffset</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, region.o(.text.RegionApplyDrOffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RegionApplyDrOffset
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920ApplyDrOffset
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[212]"></a>RegionChanMaskSet</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, region.o(.text.RegionChanMaskSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionChanMaskSet &rArr; RegionKR920ChanMaskSet
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920ChanMaskSet
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>

<P><STRONG><a name="[26e]"></a>RegionCommonChanDisable</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, regioncommon.o(.text.RegionCommonChanDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionCommonChanDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920ChannelsRemove
</UL>

<P><STRONG><a name="[26b]"></a>RegionCommonChanMaskCopy</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, regioncommon.o(.text.RegionCommonChanMaskCopy))
<BR><BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920ChanMaskSet
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920InitDefaults
</UL>

<P><STRONG><a name="[25f]"></a>RegionCommonChanVerifyDr</STRONG> (Thumb, 108 bytes, Stack size 36 bytes, regioncommon.o(.text.RegionCommonChanVerifyDr))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RegionCommonChanVerifyDr
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonLinkAdrReqVerifyParams
</UL>

<P><STRONG><a name="[255]"></a>RegionCommonComputeRxWindowParameters</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, regioncommon.o(.text.RegionCommonComputeRxWindowParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RegionCommonComputeRxWindowParameters &rArr; __aeabi_idiv
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idiv
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920ComputeRxWindowParameters
</UL>

<P><STRONG><a name="[257]"></a>RegionCommonComputeSymbolTimeLoRa</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, regioncommon.o(.text.RegionCommonComputeSymbolTimeLoRa))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RegionCommonComputeSymbolTimeLoRa &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920ComputeRxWindowParameters
</UL>

<P><STRONG><a name="[258]"></a>RegionCommonComputeTxPower</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, regioncommon.o(.text.RegionCommonComputeTxPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = RegionCommonComputeTxPower &rArr; floorf &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floorf
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920TxConfig
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920SetContinuousWave
</UL>

<P><STRONG><a name="[275]"></a>RegionCommonCountChannels</STRONG> (Thumb, 50 bytes, Stack size 20 bytes, regioncommon.o(.text.RegionCommonCountChannels))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RegionCommonCountChannels
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920NextChannel
</UL>

<P><STRONG><a name="[25d]"></a>RegionCommonCountNbOfEnabledChannels</STRONG> (Thumb, 180 bytes, Stack size 48 bytes, regioncommon.o(.text.RegionCommonCountNbOfEnabledChannels))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RegionCommonCountNbOfEnabledChannels
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonIdentifyChannels
</UL>

<P><STRONG><a name="[25b]"></a>RegionCommonIdentifyChannels</STRONG> (Thumb, 152 bytes, Stack size 64 bytes, regioncommon.o(.text.RegionCommonIdentifyChannels))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = RegionCommonIdentifyChannels &rArr; RegionCommonUpdateBandTimeOff &rArr; UTIL_TIMER_GetElapsedTime
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_GetElapsedTime
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonUpdateBandTimeOff
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonCountNbOfEnabledChannels
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920NextChannel
</UL>

<P><STRONG><a name="[25e]"></a>RegionCommonLinkAdrReqVerifyParams</STRONG> (Thumb, 160 bytes, Stack size 56 bytes, regioncommon.o(.text.RegionCommonLinkAdrReqVerifyParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = RegionCommonLinkAdrReqVerifyParams &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanVerifyDr
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920LinkAdrReq
</UL>

<P><STRONG><a name="[272]"></a>RegionCommonParseLinkAdrReq</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, regioncommon.o(.text.RegionCommonParseLinkAdrReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RegionCommonParseLinkAdrReq
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920LinkAdrReq
</UL>

<P><STRONG><a name="[260]"></a>RegionCommonRxConfigPrint</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, regioncommon.o(.text.RegionCommonRxConfigPrint))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = RegionCommonRxConfigPrint &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920RxConfig
</UL>

<P><STRONG><a name="[261]"></a>RegionCommonSetBandTxDone</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, regioncommon.o(.text.RegionCommonSetBandTxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionCommonSetBandTxDone
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDutyCycle
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920SetBandTxDone
</UL>

<P><STRONG><a name="[263]"></a>RegionCommonTxConfigPrint</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, regioncommon.o(.text.RegionCommonTxConfigPrint))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = RegionCommonTxConfigPrint &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920TxConfig
</UL>

<P><STRONG><a name="[25c]"></a>RegionCommonUpdateBandTimeOff</STRONG> (Thumb, 196 bytes, Stack size 56 bytes, regioncommon.o(.text.RegionCommonUpdateBandTimeOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RegionCommonUpdateBandTimeOff &rArr; UTIL_TIMER_GetElapsedTime
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_GetElapsedTime
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_GetCurrentTime
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDutyCycle
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonIdentifyChannels
</UL>

<P><STRONG><a name="[26c]"></a>RegionCommonValueInRange</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, regioncommon.o(.text.RegionCommonValueInRange))
<BR><BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920ChannelAdd
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920Verify
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920RxParamSetupReq
</UL>

<P><STRONG><a name="[235]"></a>RegionComputeRxWindowParameters</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, region.o(.text.RegionComputeRxWindowParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RegionComputeRxWindowParameters &rArr; RegionKR920ComputeRxWindowParameters &rArr; RegionCommonComputeRxWindowParameters &rArr; __aeabi_idiv
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920ComputeRxWindowParameters
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenContinuousRxCWindow
</UL>

<P><STRONG><a name="[240]"></a>RegionDlChannelReq</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, region.o(.text.RegionDlChannelReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RegionDlChannelReq &rArr; RegionKR920DlChannelReq &rArr; VerifyRfFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920DlChannelReq
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[207]"></a>RegionGetNvmCtx</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, region.o(.text.RegionGetNvmCtx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RegionGetNvmCtx
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920GetNvmCtx
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>

<P><STRONG><a name="[51]"></a>RegionGetPhyParam</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, region.o(.text.RegionGetPhyParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RegionGetPhyParam &rArr; RegionKR920GetPhyParam &rArr; randr &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920GetPhyParam
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerConfigure
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacAdrCalcNext
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMaxAppPayloadWithoutFOptsLength
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(.text.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[20c]"></a>RegionGetVersion</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, region.o(.text.RegionGetVersion))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>

<P><STRONG><a name="[1d1]"></a>RegionInitDefaults</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, region.o(.text.RegionInitDefaults))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RegionInitDefaults &rArr; RegionKR920InitDefaults
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920InitDefaults
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacAdrCalcNext
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetMacParameters
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
</UL>

<P><STRONG><a name="[1f8]"></a>RegionIsActive</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, region.o(.text.RegionIsActive))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
</UL>

<P><STRONG><a name="[250]"></a>RegionKR920AlternateDr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, regionkr920.o(.text.RegionKR920AlternateDr))
<BR><BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAlternateDr
</UL>

<P><STRONG><a name="[251]"></a>RegionKR920ApplyCFList</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, regionkr920.o(.text.RegionKR920ApplyCFList))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = RegionKR920ApplyCFList &rArr; RegionKR920ChannelAdd &rArr; VerifyRfFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920ChannelsRemove
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920ChannelAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionApplyCFList
</UL>

<P><STRONG><a name="[253]"></a>RegionKR920ApplyDrOffset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, regionkr920.o(.text.RegionKR920ApplyDrOffset))
<BR><BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionApplyDrOffset
</UL>

<P><STRONG><a name="[254]"></a>RegionKR920ChanMaskSet</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, regionkr920.o(.text.RegionKR920ChanMaskSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RegionKR920ChanMaskSet
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanMaskCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionChanMaskSet
</UL>

<P><STRONG><a name="[269]"></a>RegionKR920ChannelAdd</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, regionkr920.o(.text.RegionKR920ChannelAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RegionKR920ChannelAdd &rArr; VerifyRfFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyRfFreq
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920ApplyCFList
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920NewChannelReq
</UL>

<P><STRONG><a name="[26a]"></a>RegionKR920ChannelsRemove</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, regionkr920.o(.text.RegionKR920ChannelsRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RegionKR920ChannelsRemove &rArr; RegionCommonChanDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920ApplyCFList
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920NewChannelReq
</UL>

<P><STRONG><a name="[264]"></a>RegionKR920ComputeRxWindowParameters</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, regionkr920.o(.text.RegionKR920ComputeRxWindowParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RegionKR920ComputeRxWindowParameters &rArr; RegionCommonComputeRxWindowParameters &rArr; __aeabi_idiv
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeLoRa
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionComputeRxWindowParameters
</UL>

<P><STRONG><a name="[265]"></a>RegionKR920DlChannelReq</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, regionkr920.o(.text.RegionKR920DlChannelReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RegionKR920DlChannelReq &rArr; VerifyRfFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyRfFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionDlChannelReq
</UL>

<P><STRONG><a name="[266]"></a>RegionKR920GetNvmCtx</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, regionkr920.o(.text.RegionKR920GetNvmCtx))
<BR><BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetNvmCtx
</UL>

<P><STRONG><a name="[267]"></a>RegionKR920GetPhyParam</STRONG> (Thumb, 208 bytes, Stack size 8 bytes, regionkr920.o(.text.RegionKR920GetPhyParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RegionKR920GetPhyParam &rArr; randr &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randr
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920LinkAdrReq
</UL>

<P><STRONG><a name="[268]"></a>RegionKR920InitDefaults</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, regionkr920.o(.text.RegionKR920InitDefaults))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RegionKR920InitDefaults
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanMaskCopy
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionInitDefaults
</UL>

<P><STRONG><a name="[271]"></a>RegionKR920LinkAdrReq</STRONG> (Thumb, 272 bytes, Stack size 88 bytes, regionkr920.o(.text.RegionKR920LinkAdrReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = RegionKR920LinkAdrReq &rArr; RegionCommonLinkAdrReqVerifyParams &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonParseLinkAdrReq
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonLinkAdrReqVerifyParams
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920GetPhyParam
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionLinkAdrReq
</UL>

<P><STRONG><a name="[273]"></a>RegionKR920NewChannelReq</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, regionkr920.o(.text.RegionKR920NewChannelReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = RegionKR920NewChannelReq &rArr; RegionKR920ChannelAdd &rArr; VerifyRfFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920ChannelsRemove
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920ChannelAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionNewChannelReq
</UL>

<P><STRONG><a name="[274]"></a>RegionKR920NextChannel</STRONG> (Thumb, 264 bytes, Stack size 120 bytes, regionkr920.o(.text.RegionKR920NextChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = RegionKR920NextChannel &rArr; RegionCommonIdentifyChannels &rArr; RegionCommonUpdateBandTimeOff &rArr; UTIL_TIMER_GetElapsedTime
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimeOnAir
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randr
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonIdentifyChannels
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonCountChannels
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionNextChannel
</UL>

<P><STRONG><a name="[277]"></a>RegionKR920RxConfig</STRONG> (Thumb, 168 bytes, Stack size 80 bytes, regionkr920.o(.text.RegionKR920RxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = RegionKR920RxConfig &rArr; RegionCommonRxConfigPrint &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonRxConfigPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxConfig
</UL>

<P><STRONG><a name="[278]"></a>RegionKR920RxParamSetupReq</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, regionkr920.o(.text.RegionKR920RxParamSetupReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RegionKR920RxParamSetupReq &rArr; VerifyRfFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyRfFreq
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxParamSetupReq
</UL>

<P><STRONG><a name="[279]"></a>RegionKR920SetBandTxDone</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, regionkr920.o(.text.RegionKR920SetBandTxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RegionKR920SetBandTxDone &rArr; RegionCommonSetBandTxDone
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonSetBandTxDone
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionSetBandTxDone
</UL>

<P><STRONG><a name="[27a]"></a>RegionKR920SetContinuousWave</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, regionkr920.o(.text.RegionKR920SetContinuousWave))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = RegionKR920SetContinuousWave &rArr; RegionCommonComputeTxPower &rArr; floorf &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fminf
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionSetContinuousWave
</UL>

<P><STRONG><a name="[27c]"></a>RegionKR920TxConfig</STRONG> (Thumb, 192 bytes, Stack size 80 bytes, regionkr920.o(.text.RegionKR920TxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = RegionKR920TxConfig &rArr; RegionCommonTxConfigPrint &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimeOnAir
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonTxConfigPrint
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fminf
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionTxConfig
</UL>

<P><STRONG><a name="[280]"></a>RegionKR920TxParamSetupReq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, regionkr920.o(.text.RegionKR920TxParamSetupReq))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionTxParamSetupReq
</UL>

<P><STRONG><a name="[27d]"></a>RegionKR920Verify</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, regionkr920.o(.text.RegionKR920Verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RegionKR920Verify &rArr; VerifyRfFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyRfFreq
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionVerify
</UL>

<P><STRONG><a name="[23e]"></a>RegionLinkAdrReq</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, region.o(.text.RegionLinkAdrReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = RegionLinkAdrReq &rArr; RegionKR920LinkAdrReq &rArr; RegionCommonLinkAdrReqVerifyParams &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920LinkAdrReq
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[23b]"></a>RegionNewChannelReq</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, region.o(.text.RegionNewChannelReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = RegionNewChannelReq &rArr; RegionKR920NewChannelReq &rArr; RegionKR920ChannelAdd &rArr; VerifyRfFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920NewChannelReq
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[27e]"></a>RegionNextChannel</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, region.o(.text.RegionNextChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = RegionNextChannel &rArr; RegionKR920NextChannel &rArr; RegionCommonIdentifyChannels &rArr; RegionCommonUpdateBandTimeOff &rArr; UTIL_TIMER_GetElapsedTime
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920NextChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[236]"></a>RegionRxConfig</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, region.o(.text.RegionRxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = RegionRxConfig &rArr; RegionKR920RxConfig &rArr; RegionCommonRxConfigPrint &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920RxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxWindowSetup
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenContinuousRxCWindow
</UL>

<P><STRONG><a name="[23f]"></a>RegionRxParamSetupReq</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, region.o(.text.RegionRxParamSetupReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RegionRxParamSetupReq &rArr; RegionKR920RxParamSetupReq &rArr; VerifyRfFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920RxParamSetupReq
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[21d]"></a>RegionSetBandTxDone</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, region.o(.text.RegionSetBandTxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RegionSetBandTxDone &rArr; RegionKR920SetBandTxDone &rArr; RegionCommonSetBandTxDone
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920SetBandTxDone
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[219]"></a>RegionSetContinuousWave</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, region.o(.text.RegionSetContinuousWave))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = RegionSetContinuousWave &rArr; RegionKR920SetContinuousWave &rArr; RegionCommonComputeTxPower &rArr; floorf &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920SetContinuousWave
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
</UL>

<P><STRONG><a name="[27f]"></a>RegionTxConfig</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, region.o(.text.RegionTxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = RegionTxConfig &rArr; RegionKR920TxConfig &rArr; RegionCommonTxConfigPrint &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920TxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[23c]"></a>RegionTxParamSetupReq</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, region.o(.text.RegionTxParamSetupReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RegionTxParamSetupReq
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920TxParamSetupReq
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[1ff]"></a>RegionVerify</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, region.o(.text.RegionVerify))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RegionVerify &rArr; RegionKR920Verify &rArr; VerifyRfFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920Verify
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacTestSetDutyCycleOn
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
</UL>

<P><STRONG><a name="[2ab]"></a>SEQ_BitPosition</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32_seq.o(.text.SEQ_BitPosition))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SEQ_BitPosition
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_RegTask
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_Run
</UL>

<P><STRONG><a name="[15]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_it.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[ae]"></a>SX1276GetStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sx1276.o(.text.SX1276GetStatus))
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[b6]"></a>SX1276GetTimeOnAir</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, sx1276.o(.text.SX1276GetTimeOnAir))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SX1276GetTimeOnAir &rArr; __aeabi_idiv
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idiv
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[c2]"></a>SX1276GetWakeupTime</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sx1276.o(.text.SX1276GetWakeupTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SX1276GetWakeupTime
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMWX1ZZABZ0XX_RADIO_GetWakeUpTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[ad]"></a>SX1276Init</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, sx1276.o(.text.SX1276Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = SX1276Init &rArr; SX1276SetModem &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; CMWX1ZZABZ0XX_RADIO_SendRecv &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMWX1ZZABZ0XX_RADIO_SetXO
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMWX1ZZABZ0XX_RADIO_Reset
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMWX1ZZABZ0XX_RADIO_IoIrqInit
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMWX1ZZABZ0XX_RADIO_GetWakeUpTime
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxChainCalibration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[b1]"></a>SX1276IsChannelFree</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, sx1276.o(.text.SX1276IsChannelFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = SX1276IsChannelFree &rArr; SX1276SetModem &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; CMWX1ZZABZ0XX_RADIO_SendRecv &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_GetElapsedTime
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_GetCurrentTime
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetSleep
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadRssi
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFskBandwidthRegValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[b2]"></a>SX1276Random</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, sx1276.o(.text.SX1276Random))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = SX1276Random &rArr; SX1276SetModem &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; CMWX1ZZABZ0XX_RADIO_SendRecv &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetSleep
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[6b]"></a>SX1276Read</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, sx1276.o(.text.SX1276Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = SX1276Read &rArr; SX1276ReadBuffer &rArr; CMWX1ZZABZ0XX_RADIO_SendRecv &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276StartCad
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxContinuousWave
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadRssi
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Random
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio3Irq
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio2Irq
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio1Irq
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio0Irq
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxChainCalibration
</UL>
<BR>[Address Reference Count : 6]<UL><LI> sx1276.o(.text.SX1276SetRxConfig)
<LI> sx1276.o(.text.SX1276SetTxConfig)
<LI> sx1276.o(.text.SX1276Send)
<LI> sx1276.o(.text.SX1276SetRx)
<LI> sx1276.o(.text.RxChainCalibration)
<LI> sx1276.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[bf]"></a>SX1276ReadBuffer</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, sx1276.o(.text.SX1276ReadBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = SX1276ReadBuffer &rArr; CMWX1ZZABZ0XX_RADIO_SendRecv &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMWX1ZZABZ0XX_RADIO_SendRecv
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMWX1ZZABZ0XX_RADIO_ChipSelect
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadFifo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[bd]"></a>SX1276ReadRssi</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, sx1276.o(.text.SX1276ReadRssi))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = SX1276ReadRssi &rArr; SX1276Read &rArr; SX1276ReadBuffer &rArr; CMWX1ZZABZ0XX_RADIO_SendRecv &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[b7]"></a>SX1276Send</STRONG> (Thumb, 360 bytes, Stack size 32 bytes, sx1276.o(.text.SX1276Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = SX1276Send &rArr; SX1276SetStby &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; CMWX1ZZABZ0XX_RADIO_SendRecv &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_MEM_cpy_8
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Stop
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Start
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_SetPeriod
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetStby
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteFifo
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[b0]"></a>SX1276SetChannel</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, sx1276.o(.text.SX1276SetChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SX1276SetChannel &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxContinuousWave
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxChainCalibration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[c0]"></a>SX1276SetMaxPayloadLength</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sx1276.o(.text.SX1276SetMaxPayloadLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = SX1276SetMaxPayloadLength &rArr; SX1276SetModem &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; CMWX1ZZABZ0XX_RADIO_SendRecv &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[af]"></a>SX1276SetModem</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, sx1276.o(.text.SX1276SetModem))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = SX1276SetModem &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; CMWX1ZZABZ0XX_RADIO_SendRecv &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetPublicNetwork
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetMaxPayloadLength
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Random
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[c1]"></a>SX1276SetPublicNetwork</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, sx1276.o(.text.SX1276SetPublicNetwork))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = SX1276SetPublicNetwork &rArr; SX1276SetModem &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; CMWX1ZZABZ0XX_RADIO_SendRecv &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[ba]"></a>SX1276SetRx</STRONG> (Thumb, 488 bytes, Stack size 24 bytes, sx1276.o(.text.SX1276SetRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = SX1276SetRx &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; CMWX1ZZABZ0XX_RADIO_SendRecv &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Stop
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Start
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_SetPeriod
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[b3]"></a>SX1276SetRxConfig</STRONG> (Thumb, 732 bytes, Stack size 64 bytes, sx1276.o(.text.SX1276SetRxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = SX1276SetRxConfig &rArr; SX1276SetModem &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; CMWX1ZZABZ0XX_RADIO_SendRecv &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFskBandwidthRegValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[b8]"></a>SX1276SetSleep</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sx1276.o(.text.SX1276SetSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = SX1276SetSleep &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; CMWX1ZZABZ0XX_RADIO_SendRecv &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMWX1ZZABZ0XX_RADIO_SetXO
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Random
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[b9]"></a>SX1276SetStby</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, sx1276.o(.text.SX1276SetStby))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = SX1276SetStby &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; CMWX1ZZABZ0XX_RADIO_SendRecv &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[b4]"></a>SX1276SetTxConfig</STRONG> (Thumb, 748 bytes, Stack size 64 bytes, sx1276.o(.text.SX1276SetTxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = SX1276SetTxConfig &rArr; SX1276SetModem &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; CMWX1ZZABZ0XX_RADIO_SendRecv &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMWX1ZZABZ0XX_RADIO_GetPaSelect
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetSleep
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxContinuousWave
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[bc]"></a>SX1276SetTxContinuousWave</STRONG> (Thumb, 120 bytes, Stack size 56 bytes, sx1276.o(.text.SX1276SetTxContinuousWave))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = SX1276SetTxContinuousWave &rArr; SX1276SetTxConfig &rArr; SX1276SetModem &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; CMWX1ZZABZ0XX_RADIO_SendRecv &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Start
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_SetPeriod
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[bb]"></a>SX1276StartCad</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, sx1276.o(.text.SX1276StartCad))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = SX1276StartCad &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; CMWX1ZZABZ0XX_RADIO_SendRecv &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[6d]"></a>SX1276Write</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, sx1276.o(.text.SX1276Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = SX1276Write &rArr; SX1276WriteBuffer &rArr; CMWX1ZZABZ0XX_RADIO_SendRecv &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276StartCad
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetPublicNetwork
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetMaxPayloadLength
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Random
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio3Irq
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio2Irq
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio1Irq
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio0Irq
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxChainCalibration
</UL>
<BR>[Address Reference Count : 5]<UL><LI> sx1276.o(.text.SX1276SetRxConfig)
<LI> sx1276.o(.text.SX1276SetModem)
<LI> sx1276.o(.text.SX1276SetRx)
<LI> sx1276.o(.text.SX1276SetTxContinuousWave)
<LI> sx1276.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[be]"></a>SX1276WriteBuffer</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, sx1276.o(.text.SX1276WriteBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = SX1276WriteBuffer &rArr; CMWX1ZZABZ0XX_RADIO_SendRecv &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMWX1ZZABZ0XX_RADIO_SendRecv
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMWX1ZZABZ0XX_RADIO_ChipSelect
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteFifo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[13a]"></a>SYS_GetBatteryLevel</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, adc_if.o(.text.SYS_GetBatteryLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SYS_GetBatteryLevel &rArr; ADC_ReadChannels &rArr; MX_ADC_Init &rArr; HAL_ADCEx_Calibration_Start &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ReadChannels
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_bat_get
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_GetTemperatureLevel
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryLevel
</UL>

<P><STRONG><a name="[17a]"></a>SYS_GetTemperatureLevel</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, adc_if.o(.text.SYS_GetTemperatureLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = SYS_GetTemperatureLevel &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ReadChannels
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_GetBatteryLevel
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idiv
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTemperatureLevel
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendTxData
</UL>

<P><STRONG><a name="[296]"></a>SYS_InitMeasurement</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, adc_if.o(.text.SYS_InitMeasurement))
<BR><BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemApp_Init
</UL>

<P><STRONG><a name="[239]"></a>SecureElementAesEncrypt</STRONG> (Thumb, 96 bytes, Stack size 272 bytes, soft-se.o(.text.SecureElementAesEncrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = SecureElementAesEncrypt &rArr; lorawan_aes_set_key &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyByID
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_aes_set_key
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_aes_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PayloadEncrypt
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementSetKey
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementProcessJoinAccept
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementDeriveAndStoreKey
</UL>

<P><STRONG><a name="[1ed]"></a>SecureElementComputeAesCmac</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, soft-se.o(.text.SecureElementComputeAesCmac))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = SecureElementComputeAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; lorawan_aes_encrypt &rArr; copy_and_key
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeCmac
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoSecureMessage
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoPrepareJoinRequest
</UL>

<P><STRONG><a name="[16f]"></a>SecureElementDeriveAndStoreKey</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, soft-se.o(.text.SecureElementDeriveAndStoreKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_set_key &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementSetKey
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementAesEncrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoDeriveMcRootKey
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoDeriveMcKEKey
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeriveSessionKey10x
</UL>

<P><STRONG><a name="[203]"></a>SecureElementGetDevEui</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, soft-se.o(.text.SecureElementGetDevEui))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>

<P><STRONG><a name="[204]"></a>SecureElementGetJoinEui</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, soft-se.o(.text.SecureElementGetJoinEui))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>

<P><STRONG><a name="[208]"></a>SecureElementGetNvmCtx</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, soft-se.o(.text.SecureElementGetNvmCtx))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>

<P><STRONG><a name="[1fb]"></a>SecureElementInit</STRONG> (Thumb, 556 bytes, Stack size 128 bytes, soft-se.o(.text.SecureElementInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = SecureElementInit &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyByID
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
</UL>

<P><STRONG><a name="[1e7]"></a>SecureElementProcessJoinAccept</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, soft-se.o(.text.SecureElementProcessJoinAccept))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = SecureElementProcessJoinAccept &rArr; SecureElementVerifyAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; lorawan_aes_encrypt &rArr; copy_and_key
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementVerifyAesCmac
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementAesEncrypt
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoHandleJoinAccept
</UL>

<P><STRONG><a name="[1eb]"></a>SecureElementRandomNumber</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, soft-se.o(.text.SecureElementRandomNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SecureElementRandomNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoPrepareJoinRequest
</UL>

<P><STRONG><a name="[213]"></a>SecureElementRestoreNvmCtx</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, soft-se.o(.text.SecureElementRestoreNvmCtx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SecureElementRestoreNvmCtx
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>

<P><STRONG><a name="[20e]"></a>SecureElementSetDevEui</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, soft-se.o(.text.SecureElementSetDevEui))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SecureElementSetDevEui
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>

<P><STRONG><a name="[20f]"></a>SecureElementSetJoinEui</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, soft-se.o(.text.SecureElementSetJoinEui))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SecureElementSetJoinEui
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>

<P><STRONG><a name="[1f3]"></a>SecureElementSetKey</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, soft-se.o(.text.SecureElementSetKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_set_key &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementAesEncrypt
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoSetKey
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementDeriveAndStoreKey
</UL>

<P><STRONG><a name="[1f7]"></a>SecureElementVerifyAesCmac</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, soft-se.o(.text.SecureElementVerifyAesCmac))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = SecureElementVerifyAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; lorawan_aes_encrypt &rArr; copy_and_key
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeCmac
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoUnsecureMessage
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementProcessJoinAccept
</UL>

<P><STRONG><a name="[17]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32l0xx_it.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[241]"></a>SysTimeAdd</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32_systime.o(.text.SysTimeAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTimeAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeGet
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[128]"></a>SysTimeGet</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, stm32_systime.o(.text.SysTimeGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SysTimeGet &rArr; SysTimeAdd
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimestampNow
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_LocalTime_get
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioTxDone
</UL>

<P><STRONG><a name="[1fa]"></a>SysTimeGetMcuTime</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32_systime.o(.text.SysTimeGetMcuTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTimeGetMcuTime
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
</UL>

<P><STRONG><a name="[129]"></a>SysTimeLocalTime</STRONG> (Thumb, 260 bytes, Stack size 40 bytes, stm32_systime.o(.text.SysTimeLocalTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SysTimeLocalTime &rArr; CalendarDiv60
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalendarDiv61
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalendarDiv60
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_LocalTime_get
</UL>

<P><STRONG><a name="[242]"></a>SysTimeSet</STRONG> (Thumb, 64 bytes, Stack size 48 bytes, stm32_systime.o(.text.SysTimeSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SysTimeSet &rArr; SysTimeSub
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeSub
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[21c]"></a>SysTimeSub</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32_systime.o(.text.SysTimeSub))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTimeSub
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeSet
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[22c]"></a>SystemApp_Init</STRONG> (Thumb, 208 bytes, Stack size 56 bytes, sys_app.o(.text.SystemApp_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = SystemApp_Init &rArr; CMWX1ZZABZ0XX_RADIO_IoInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Init
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_LPM_SetOffMode
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_LPM_Init
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_RegisterTimeStampFunction
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_Init
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_Init
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMWX1ZZABZ0XX_RADIO_Bus_Init
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMWX1ZZABZ0XX_RADIO_IoInit
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_InitMeasurement
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_SetVerboseLevel
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LoRaWAN_Init
</UL>

<P><STRONG><a name="[299]"></a>SystemClock_Config</STRONG> (Thumb, 128 bytes, Stack size 96 bytes, main.o(.text.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[37]"></a>SystemInit</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, system_stm32l0xx.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(.text)
</UL>
<P><STRONG><a name="[140]"></a>TST_RX_Start</STRONG> (Thumb, 348 bytes, Stack size 104 bytes, test_rf.o(.text.TST_RX_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = TST_RX_Start &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_WaitEvt
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_test_rx
</UL>

<P><STRONG><a name="[141]"></a>TST_RxRssi</STRONG> (Thumb, 152 bytes, Stack size 64 bytes, test_rf.o(.text.TST_RxRssi))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = TST_RxRssi &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_test_rxRssi
</UL>

<P><STRONG><a name="[144]"></a>TST_TX_Start</STRONG> (Thumb, 360 bytes, Stack size 344 bytes, test_rf.o(.text.TST_TX_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = TST_TX_Start &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_WaitEvt
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_test_tx_hopping
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_test_tx
</UL>

<P><STRONG><a name="[145]"></a>TST_TxTone</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, test_rf.o(.text.TST_TxTone))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = TST_TxTone &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_test_txTone
</UL>

<P><STRONG><a name="[13f]"></a>TST_get_config</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, test_rf.o(.text.TST_get_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TST_get_config
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_MEM_cpy_8
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_test_tx_hopping
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_test_get_config
</UL>

<P><STRONG><a name="[142]"></a>TST_set_config</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, test_rf.o(.text.TST_set_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TST_set_config
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_MEM_cpy_8
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_test_tx_hopping
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_test_set_config
</UL>

<P><STRONG><a name="[143]"></a>TST_stop</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, test_rf.o(.text.TST_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TST_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_test_stop
</UL>

<P><STRONG><a name="[2ae]"></a>TimerExists</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32_timer.o(.text.TimerExists))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Start
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_SetPeriod
</UL>

<P><STRONG><a name="[2a0]"></a>TimerInsertNewHeadTimer</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32_timer.o(.text.TimerInsertNewHeadTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TimerInsertNewHeadTimer &rArr; TimerSetTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Start
</UL>

<P><STRONG><a name="[2af]"></a>TimerInsertTimer</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32_timer.o(.text.TimerInsertTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TimerInsertTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Start
</UL>

<P><STRONG><a name="[2a1]"></a>TimerSetTimeout</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, stm32_timer.o(.text.TimerSetTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TimerSetTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_IRQ_Handler
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Stop
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInsertNewHeadTimer
</UL>

<P><STRONG><a name="[1aa]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, stm32l0xx_hal_uart.o(.text.UART_AdvFeatureConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[1ab]"></a>UART_CheckIdleState</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, stm32l0xx_hal_uart.o(.text.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[1a9]"></a>UART_SetConfig</STRONG> (Thumb, 436 bytes, Stack size 24 bytes, stm32l0xx_hal_uart.o(.text.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[1b0]"></a>UART_Start_Receive_IT</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, stm32l0xx_hal_uart.o(.text.UART_Start_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_Start_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>

<P><STRONG><a name="[19e]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, stm32l0xx_hal_uart.o(.text.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = UART_WaitOnFlagUntilTimeout &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_StopModeWakeUpSourceConfig
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[3b]"></a>UTIL_ADV_TRACE_COND_FSend</STRONG> (Thumb, 160 bytes, Stack size 48 bytes, stm32_adv_trace.o(.text.UTIL_ADV_TRACE_COND_FSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_vsnprintf_like
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACE_UnLock
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACE_Send
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACE_Lock
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACE_AllocateBufer
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_error
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TST_TxTone
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TST_TX_Start
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TST_RxRssi
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TST_RX_Start
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_verbose_set
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_test_tx_hopping
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_test_tx
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_test_stop
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_test_rx
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_test_get_config
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Send
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Region_get
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_LocalTime_get
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_DeviceClass_get
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_uint32_as_02x
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_u
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_d
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_8_02x
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_GetTemperatureLevel
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerJoin
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerConfigure
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryLevel
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_Process
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_event_receive
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_event_join
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_event_confirm
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendTxData
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioTxTimeout
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioTxDone
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxTimeout
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayClassUpdate
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementInit
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonTxConfigPrint
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonRxConfigPrint
</UL>
<BR>[Address Reference Count : 3]<UL><LI> lora_app.o(.text.LoRaWAN_Init)
<LI> lora_at.o(.text.AT_version_get)
<LI> lora_at.o(.text.AT_test_get_config)
</UL>
<P><STRONG><a name="[146]"></a>UTIL_ADV_TRACE_GetVerboseLevel</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32_adv_trace.o(.text.UTIL_ADV_TRACE_GetVerboseLevel))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_verbose_get
</UL>

<P><STRONG><a name="[294]"></a>UTIL_ADV_TRACE_Init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32_adv_trace.o(.text.UTIL_ADV_TRACE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UTIL_ADV_TRACE_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_MEM_set_8
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemApp_Init
</UL>

<P><STRONG><a name="[29e]"></a>UTIL_ADV_TRACE_PostSendHook</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_app.o(.text.UTIL_ADV_TRACE_PostSendHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UTIL_ADV_TRACE_PostSendHook
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_LPM_SetStopMode
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACE_TxCpltCallback
</UL>

<P><STRONG><a name="[29d]"></a>UTIL_ADV_TRACE_PreSendHook</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_app.o(.text.UTIL_ADV_TRACE_PreSendHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UTIL_ADV_TRACE_PreSendHook
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_LPM_SetStopMode
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACE_Send
</UL>

<P><STRONG><a name="[295]"></a>UTIL_ADV_TRACE_RegisterTimeStampFunction</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32_adv_trace.o(.text.UTIL_ADV_TRACE_RegisterTimeStampFunction))
<BR><BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemApp_Init
</UL>

<P><STRONG><a name="[147]"></a>UTIL_ADV_TRACE_SetVerboseLevel</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32_adv_trace.o(.text.UTIL_ADV_TRACE_SetVerboseLevel))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_verbose_set
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemApp_Init
</UL>

<P><STRONG><a name="[152]"></a>UTIL_ADV_TRACE_StartRxProcess</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32_adv_trace.o(.text.UTIL_ADV_TRACE_StartRxProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UTIL_ADV_TRACE_StartRxProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_Init
</UL>

<P><STRONG><a name="[2aa]"></a>UTIL_LPM_EnterLowPower</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32_lpm.o(.text.UTIL_LPM_EnterLowPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UTIL_LPM_EnterLowPower
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_Idle
</UL>

<P><STRONG><a name="[24f]"></a>UTIL_LPM_GetMode</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32_lpm.o(.text.UTIL_LPM_GetMode))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IF_StartTimer
</UL>

<P><STRONG><a name="[297]"></a>UTIL_LPM_Init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32_lpm.o(.text.UTIL_LPM_Init))
<BR><BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemApp_Init
</UL>

<P><STRONG><a name="[298]"></a>UTIL_LPM_SetOffMode</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32_lpm.o(.text.UTIL_LPM_SetOffMode))
<BR><BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemApp_Init
</UL>

<P><STRONG><a name="[24e]"></a>UTIL_LPM_SetStopMode</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32_lpm.o(.text.UTIL_LPM_SetStopMode))
<BR><BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_PreSendHook
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_PostSendHook
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IF_StartTimer
</UL>

<P><STRONG><a name="[1c0]"></a>UTIL_MEM_cpy_8</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32_mem.o(.text.UTIL_MEM_cpy_8))
<BR><BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_MEM_cpy_8
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_MEM_cpy_8
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TST_set_config
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TST_get_config
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetAppEUI
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetDevEUI
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetAppEUI
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerInit
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerConfigure
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
</UL>

<P><STRONG><a name="[2a7]"></a>UTIL_MEM_set_8</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32_mem.o(.text.UTIL_MEM_set_8))
<BR><BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_MEM_set_8
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_Init
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_MEM_set_8
</UL>

<P><STRONG><a name="[2a8]"></a>UTIL_SEQ_EvtIdle</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32_seq.o(.text.UTIL_SEQ_EvtIdle))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run &rArr; UTIL_SEQ_Idle &rArr; UTIL_LPM_EnterLowPower
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_Run
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_WaitEvt
</UL>

<P><STRONG><a name="[2a9]"></a>UTIL_SEQ_Idle</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, sys_app.o(.text.UTIL_SEQ_Idle))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UTIL_SEQ_Idle &rArr; UTIL_LPM_EnterLowPower
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_LPM_EnterLowPower
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_Run
</UL>

<P><STRONG><a name="[2ad]"></a>UTIL_SEQ_PostIdle</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32_seq.o(.text.UTIL_SEQ_PostIdle))
<BR><BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_Run
</UL>

<P><STRONG><a name="[2ac]"></a>UTIL_SEQ_PreIdle</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32_seq.o(.text.UTIL_SEQ_PreIdle))
<BR><BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_Run
</UL>

<P><STRONG><a name="[67]"></a>UTIL_SEQ_RegTask</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32_seq.o(.text.UTIL_SEQ_RegTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UTIL_SEQ_RegTask &rArr; SEQ_BitPosition
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEQ_BitPosition
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Certif
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_app.o(.text.LoRaWAN_Init)
</UL>
<P><STRONG><a name="[22e]"></a>UTIL_SEQ_Run</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, stm32_seq.o(.text.UTIL_SEQ_Run))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UTIL_SEQ_Run &rArr; UTIL_SEQ_Idle &rArr; UTIL_LPM_EnterLowPower
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_Idle
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_PreIdle
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_PostIdle
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEQ_BitPosition
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LoRaWAN_Process
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_EvtIdle
</UL>

<P><STRONG><a name="[233]"></a>UTIL_SEQ_SetEvt</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32_seq.o(.text.UTIL_SEQ_SetEvt))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxTimeout
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxDone
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxTimeout
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxError
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxDone
</UL>

<P><STRONG><a name="[166]"></a>UTIL_SEQ_SetTask</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32_seq.o(.text.UTIL_SEQ_SetTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UTIL_SEQ_SetTask
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnCertifTimer
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxTimerEvent
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMacProcessNotify
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcessNotify
</UL>

<P><STRONG><a name="[29f]"></a>UTIL_SEQ_WaitEvt</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, stm32_seq.o(.text.UTIL_SEQ_WaitEvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run &rArr; UTIL_SEQ_Idle &rArr; UTIL_LPM_EnterLowPower
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_EvtIdle
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TST_TX_Start
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TST_RX_Start
</UL>

<P><STRONG><a name="[53]"></a>UTIL_TIMER_Create</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, stm32_timer.o(.text.UTIL_TIMER_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UTIL_TIMER_Create
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Certif
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpComplianceOnMcpsIndication
</UL>
<BR>[Address Reference Count : 3]<UL><LI> lora_app.o(.text.LoRaWAN_Init)
<LI> loramac.o(.text.LoRaMacInitialization)
<LI> sx1276.o(.text.SX1276Init)
</UL>
<P><STRONG><a name="[232]"></a>UTIL_TIMER_GetCurrentTime</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32_timer.o(.text.UTIL_TIMER_GetCurrentTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UTIL_TIMER_GetCurrentTime
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioTxDone
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonUpdateBandTimeOff
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
</UL>

<P><STRONG><a name="[1be]"></a>UTIL_TIMER_GetElapsedTime</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, stm32_timer.o(.text.UTIL_TIMER_GetElapsedTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UTIL_TIMER_GetElapsedTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRadioRxErrorTimeout
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonUpdateBandTimeOff
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonIdentifyChannels
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
</UL>

<P><STRONG><a name="[18f]"></a>UTIL_TIMER_IRQ_Handler</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, stm32_timer.o(.text.UTIL_TIMER_IRQ_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UTIL_TIMER_IRQ_Handler &rArr; UTIL_TIMER_Start &rArr; TimerInsertNewHeadTimer &rArr; TimerSetTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Start
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmAEventCallback
</UL>

<P><STRONG><a name="[293]"></a>UTIL_TIMER_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32_timer.o(.text.UTIL_TIMER_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UTIL_TIMER_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemApp_Init
</UL>

<P><STRONG><a name="[65]"></a>UTIL_TIMER_SetPeriod</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32_timer.o(.text.UTIL_TIMER_SetPeriod))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UTIL_TIMER_SetPeriod &rArr; UTIL_TIMER_Start &rArr; TimerInsertNewHeadTimer &rArr; TimerSetTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Stop
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Start
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerExists
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Certif
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpComplianceOnMcpsIndication
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxContinuousWave
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_app.o(.text.LoRaWAN_Init)
</UL>
<P><STRONG><a name="[110]"></a>UTIL_TIMER_Start</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, stm32_timer.o(.text.UTIL_TIMER_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UTIL_TIMER_Start &rArr; TimerInsertNewHeadTimer &rArr; TimerSetTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInsertTimer
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInsertNewHeadTimer
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerExists
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_IRQ_Handler
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Certif
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CertifSend
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_SetPeriod
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxTimerEvent
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxData
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxData
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaWAN_Init
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpComplianceTxProcess
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxContinuousWave
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
</UL>

<P><STRONG><a name="[6e]"></a>UTIL_TIMER_Stop</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, stm32_timer.o(.text.UTIL_TIMER_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UTIL_TIMER_Stop &rArr; TimerSetTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_SetPeriod
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnJoinRequest
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxWindowSetup
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxDelayedTimerEvent
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnAckTimeoutTimerEvent
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRadioRxErrorTimeout
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpComplianceOnMcpsIndication
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio2Irq
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio1Irq
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio0Irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.text.SX1276SetStby)
</UL>
<P><STRONG><a name="[108]"></a>lorawan_aes_encrypt</STRONG> (Thumb, 580 bytes, Stack size 80 bytes, lorawan_aes.o(.text.lorawan_aes_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lorawan_aes_encrypt &rArr; copy_and_key
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xor_block
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_and_key
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementAesEncrypt
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Update
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Final
</UL>

<P><STRONG><a name="[10b]"></a>lorawan_aes_set_key</STRONG> (Thumb, 260 bytes, Stack size 72 bytes, lorawan_aes.o(.text.lorawan_aes_set_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lorawan_aes_set_key &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementAesEncrypt
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_SetKey
</UL>

<P><STRONG><a name="[36]"></a>main</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = main &rArr; MX_LoRaWAN_Init &rArr; LoRaWAN_Init &rArr; LmHandlerJoin &rArr; LoRaMacMlmeRequest &rArr; ScheduleTx &rArr; LoRaMacCryptoSecureMessage &rArr; SecureElementComputeAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; lorawan_aes_encrypt &rArr; copy_and_key
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LoRaWAN_Process
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LoRaWAN_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[3f]"></a>memcpy1</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, utilities.o(.text.memcpy1))
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerConfigure
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920ChannelAdd
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacParserJoinAccept
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacSerializerData
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacParserData
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoUnsecureMessage
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoRestoreNvmCtx
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoHandleJoinAccept
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueRestoreNvmCtx
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsSerializeCmds
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsRestoreNvmCtx
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsAddCmd
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementSetKey
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementSetJoinEui
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementSetDevEui
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementRestoreNvmCtx
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementProcessJoinAccept
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementInit
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Update
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Final
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920InitDefaults
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramaccrypto.o(.text.DeriveSessionKey10x)
</UL>
<P><STRONG><a name="[226]"></a>memcpyr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, utilities.o(.text.memcpyr))
<BR><BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacSerializerJoinRequest
</UL>

<P><STRONG><a name="[107]"></a>memset1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, utilities.o(.text.memset1))
<BR><BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsRemoveCmd
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoUnsecureMessage
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoInit
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueInit
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsInit
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementAesEncrypt
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Init
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Final
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920LinkAdrReq
</UL>

<P><STRONG><a name="[26f]"></a>randr</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, utilities.o(.text.randr))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = randr &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920NextChannel
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920GetPhyParam
</UL>

<P><STRONG><a name="[1fd]"></a>srand1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, utilities.o(.text.srand1))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
</UL>

<P><STRONG><a name="[112]"></a>tiny_sscanf</STRONG> (Thumb, 600 bytes, Stack size 96 bytes, stm32_tiny_sscanf.o(.text.tiny_sscanf))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = tiny_sscanf &rArr; __aeabi_lmul
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_verbose_set
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_test_tx_hopping
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_test_tx
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_test_set_config
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_test_rx
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_TransmitPower_set
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Send
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Rx2Frequency_set
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Rx2Delay_set
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Rx2DataRate_set
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Rx1Delay_set
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Region_set
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_PingSlot_set
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_JoinEUI_set
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_JoinAcceptDelay2_set
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_JoinAcceptDelay1_set
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_DevEUI_set
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_DataRate_set
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanf_uint32_as_hhx
</UL>

<P><STRONG><a name="[2a5]"></a>tiny_vsnprintf_like</STRONG> (Thumb, 588 bytes, Stack size 152 bytes, stm32_tiny_vsnprintf.o(.text.tiny_vsnprintf_like))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = tiny_vsnprintf_like &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_snprintf_like
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>

<P><STRONG><a name="[d9]"></a>vcom_DeInit</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, usart_if.o(.text.vcom_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = vcom_DeInit &rArr; HAL_UART_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_if.o(.rodata.UTIL_TraceDriver)
</UL>
<P><STRONG><a name="[d8]"></a>vcom_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usart_if.o(.text.vcom_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = vcom_Init &rArr; MX_LPUART1_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LPUART1_Init
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_if.o(.rodata.UTIL_TraceDriver)
</UL>
<P><STRONG><a name="[da]"></a>vcom_ReceiveInit</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, usart_if.o(.text.vcom_ReceiveInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = vcom_ReceiveInit &rArr; HAL_UARTEx_StopModeWakeUpSourceConfig &rArr; UART_WaitOnFlagUntilTimeout &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_StopModeWakeUpSourceConfig
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_EnableStopMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_if.o(.rodata.UTIL_TraceDriver)
</UL>
<P><STRONG><a name="[db]"></a>vcom_Trace_DMA</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usart_if.o(.text.vcom_Trace_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vcom_Trace_DMA &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_if.o(.rodata.UTIL_TraceDriver)
</UL>
<P><STRONG><a name="[f4]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[2c7]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[2c8]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[2c9]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[259]"></a>floorf</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, floorf.o(i.floorf))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = floorf &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
</UL>

<P><STRONG><a name="[27b]"></a>fminf</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, fminf.o(i.fminf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fminf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fcmp4
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920TxConfig
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920SetContinuousWave
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[61]"></a>CmdProcessNotify</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lora_app.o(.text.CmdProcessNotify))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CmdProcessNotify &rArr; UTIL_SEQ_SetTask
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_SetTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_app.o(.text.LoRaWAN_Init)
</UL>
<P><STRONG><a name="[3]"></a>OnJoinRequest</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lora_app.o(.text.OnJoinRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = OnJoinRequest &rArr; AT_event_join &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Stop
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Off
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_event_join
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_app.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[64]"></a>OnJoinTimerLedEvent</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lora_app.o(.text.OnJoinTimerLedEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OnJoinTimerLedEvent &rArr; BSP_LED_Toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Toggle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_app.o(.text.LoRaWAN_Init)
</UL>
<P><STRONG><a name="[2]"></a>OnMacProcessNotify</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lora_app.o(.text.OnMacProcessNotify))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OnMacProcessNotify &rArr; UTIL_SEQ_SetTask
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_SetTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_app.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[5]"></a>OnRxData</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lora_app.o(.text.OnRxData))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = OnRxData &rArr; AT_event_receive &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Start
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_On
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_event_receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_app.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[63]"></a>OnRxTimerLedEvent</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lora_app.o(.text.OnRxTimerLedEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OnRxTimerLedEvent &rArr; BSP_LED_Off
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_app.o(.text.LoRaWAN_Init)
</UL>
<P><STRONG><a name="[4]"></a>OnTxData</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lora_app.o(.text.OnTxData))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = OnTxData &rArr; AT_event_confirm &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Start
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_On
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_event_confirm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_app.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[6a]"></a>OnTxTimerEvent</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lora_app.o(.text.OnTxTimerEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = OnTxTimerEvent &rArr; UTIL_TIMER_Start &rArr; TimerInsertNewHeadTimer &rArr; TimerSetTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Start
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_SetTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_app.o(.text.LoRaWAN_Init)
</UL>
<P><STRONG><a name="[62]"></a>OnTxTimerLedEvent</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lora_app.o(.text.OnTxTimerLedEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OnTxTimerLedEvent &rArr; BSP_LED_Off
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_app.o(.text.LoRaWAN_Init)
</UL>
<P><STRONG><a name="[68]"></a>SendTxData</STRONG> (Thumb, 228 bytes, Stack size 56 bytes, lora_app.o(.text.SendTxData))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = SendTxData &rArr; LmHandlerSend &rArr; LmHandlerJoin &rArr; LoRaMacMlmeRequest &rArr; ScheduleTx &rArr; LoRaMacCryptoSecureMessage &rArr; SecureElementComputeAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; lorawan_aes_encrypt &rArr; copy_and_key
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_GetTemperatureLevel
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSend
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryLevel
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnvSensors_Read
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_app.o(.text.LoRaWAN_Init)
</UL>
<P><STRONG><a name="[3a]"></a>CertifSend</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lora_at.o(.text.CertifSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = CertifSend &rArr; LmHandlerSend &rArr; LmHandlerJoin &rArr; LoRaMacMlmeRequest &rArr; ScheduleTx &rArr; LoRaMacCryptoSecureMessage &rArr; SecureElementComputeAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; lorawan_aes_encrypt &rArr; copy_and_key
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerJoinStatus
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Start
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_at.o(.text.AT_Certif)
</UL>
<P><STRONG><a name="[39]"></a>OnCertifTimer</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lora_at.o(.text.OnCertifTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OnCertifTimer &rArr; UTIL_SEQ_SetTask
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_SetTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_at.o(.text.AT_Certif)
</UL>
<P><STRONG><a name="[13e]"></a>__NVIC_SystemReset</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lora_at.o(.text.__NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_reset
</UL>

<P><STRONG><a name="[119]"></a>print_8_02x</STRONG> (Thumb, 52 bytes, Stack size 56 bytes, lora_at.o(.text.print_8_02x))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = print_8_02x &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_JoinEUI_get
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_DevEUI_get
</UL>

<P><STRONG><a name="[10e]"></a>print_d</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lora_at.o(.text.print_d))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = print_d &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_bat_get
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_TransmitPower_get
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Rx2Frequency_get
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Rx2DataRate_get
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_PingSlot_get
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_DutyCycle_get
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_DataRate_get
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_ADR_get
</UL>

<P><STRONG><a name="[122]"></a>print_u</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lora_at.o(.text.print_u))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = print_u &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_verbose_get
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Rx2Delay_get
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Rx1Delay_get
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_JoinAcceptDelay2_get
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_JoinAcceptDelay1_get
</UL>

<P><STRONG><a name="[115]"></a>print_uint32_as_02x</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, lora_at.o(.text.print_uint32_as_02x))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = print_uint32_as_02x &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_NetworkID_get
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_DevAddr_get
</UL>

<P><STRONG><a name="[116]"></a>sscanf_uint32_as_hhx</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lora_at.o(.text.sscanf_uint32_as_hhx))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = sscanf_uint32_as_hhx &rArr; tiny_sscanf &rArr; __aeabi_lmul
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_NetworkID_set
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_DevAddr_set
</UL>

<P><STRONG><a name="[3c]"></a>CMD_GetChar</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lora_command.o(.text.CMD_GetChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CMD_GetChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.text.CMD_Init)
</UL>
<P><STRONG><a name="[153]"></a>com_error</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lora_command.o(.text.com_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = com_error &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_Process
</UL>

<P><STRONG><a name="[fc]"></a>ADC_ReadChannels</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, adc_if.o(.text.ADC_ReadChannels))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ADC_ReadChannels &rArr; MX_ADC_Init &rArr; HAL_ADCEx_Calibration_Start &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Stop
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_PollForConversion
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_GetValue
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_DeInit
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC_Init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_Start
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_GetBatteryLevel
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_GetTemperatureLevel
</UL>

<P><STRONG><a name="[247]"></a>RTC_GetCalendarValue</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, rtc_if.o(.text.RTC_GetCalendarValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IF_SetTimerContext
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IF_GetTimerValue
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IF_GetTimerElapsedTime
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IF_GetTime
</UL>

<P><STRONG><a name="[70]"></a>TimestampNow</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, sys_app.o(.text.TimestampNow))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = TimestampNow &rArr; tiny_snprintf_like &rArr; tiny_vsnprintf_like &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_snprintf_like
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeGet
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_app.o(.text.SystemApp_Init)
</UL>
<P><STRONG><a name="[2a2]"></a>tiny_snprintf_like</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, sys_app.o(.text.tiny_snprintf_like))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = tiny_snprintf_like &rArr; tiny_vsnprintf_like &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_vsnprintf_like
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimestampNow
</UL>

<P><STRONG><a name="[f6]"></a>ADC_ConversionStop</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stm32l0xx_hal_adc.o(.text.ADC_ConversionStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ADC_ConversionStop &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Stop
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_DeInit
</UL>

<P><STRONG><a name="[f8]"></a>ADC_DelayMicroSecond</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32l0xx_hal_adc.o(.text.ADC_DelayMicroSecond))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ADC_DelayMicroSecond &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
</UL>

<P><STRONG><a name="[fa]"></a>ADC_Disable</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32l0xx_hal_adc.o(.text.ADC_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ADC_Disable &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Stop
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_DeInit
</UL>

<P><STRONG><a name="[fb]"></a>ADC_Enable</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, stm32l0xx_hal_adc.o(.text.ADC_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ADC_Enable &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DelayMicroSecond
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start
</UL>

<P><STRONG><a name="[189]"></a>__NVIC_SetPriority</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, stm32l0xx_hal_cortex.o(.text.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[181]"></a>DMA_SetConfig</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, stm32l0xx_hal_dma.o(.text.DMA_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[19c]"></a>SPI_EndRxTxTransaction</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, stm32l0xx_hal_spi.o(.text.SPI_EndRxTxTransaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>

<P><STRONG><a name="[282]"></a>SPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, stm32l0xx_hal_spi.o(.text.SPI_WaitFlagStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>

<P><STRONG><a name="[41]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32l0xx_hal_uart.o(.text.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l0xx_hal_uart.o(.text.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[42]"></a>UART_DMAError</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32l0xx_hal_uart.o(.text.UART_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMAError
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l0xx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[44]"></a>UART_DMATransmitCplt</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32l0xx_hal_uart.o(.text.UART_DMATransmitCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMATransmitCplt &rArr; HAL_UART_TxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l0xx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[43]"></a>UART_DMATxHalfCplt</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32l0xx_hal_uart.o(.text.UART_DMATxHalfCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMATxHalfCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l0xx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[1a0]"></a>UART_EndRxTransfer</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32l0xx_hal_uart.o(.text.UART_EndRxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[76]"></a>UART_RxISR_16BIT</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32l0xx_hal_uart.o(.text.UART_RxISR_16BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_RxISR_16BIT &rArr; HAL_UART_RxCpltCallback &rArr; HAL_UART_Receive_IT &rArr; UART_Start_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l0xx_hal_uart.o(.text.UART_Start_Receive_IT)
</UL>
<P><STRONG><a name="[77]"></a>UART_RxISR_8BIT</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, stm32l0xx_hal_uart.o(.text.UART_RxISR_8BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_RxISR_8BIT &rArr; HAL_UART_RxCpltCallback &rArr; HAL_UART_Receive_IT &rArr; UART_Start_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l0xx_hal_uart.o(.text.UART_Start_Receive_IT)
</UL>
<P><STRONG><a name="[2b0]"></a>copy_and_key</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, lorawan_aes.o(.text.copy_and_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = copy_and_key
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_aes_encrypt
</UL>

<P><STRONG><a name="[2b1]"></a>xor_block</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, lorawan_aes.o(.text.xor_block))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_aes_encrypt
</UL>

<P><STRONG><a name="[167]"></a>ComputeCmac</STRONG> (Thumb, 122 bytes, Stack size 328 bytes, soft-se.o(.text.ComputeCmac))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = ComputeCmac &rArr; AES_CMAC_Final &rArr; lorawan_aes_encrypt &rArr; copy_and_key
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyByID
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Update
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_SetKey
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Init
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Final
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementVerifyAesCmac
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementComputeAesCmac
</UL>

<P><STRONG><a name="[6f]"></a>DummyCB</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, soft-se.o(.text.DummyCB))
<BR>[Address Reference Count : 1]<UL><LI> soft-se.o(.text.SecureElementInit)
</UL>
<P><STRONG><a name="[168]"></a>GetKeyByID</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, soft-se.o(.text.GetKeyByID))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetKeyByID
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementInit
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementAesEncrypt
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeCmac
</UL>

<P><STRONG><a name="[170]"></a>DisplayClassUpdate</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lmhandler.o(.text.DisplayClassUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = DisplayClassUpdate &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerRequestClass
</UL>

<P><STRONG><a name="[4b]"></a>LmHandlerDeviceTimeReq</STRONG> (Thumb, 24 bytes, Stack size 32 bytes, lmhandler.o(.text.LmHandlerDeviceTimeReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = LmHandlerDeviceTimeReq &rArr; LoRaMacMlmeRequest &rArr; ScheduleTx &rArr; LoRaMacCryptoSecureMessage &rArr; SecureElementComputeAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; lorawan_aes_encrypt &rArr; copy_and_key
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmhandler.o(.text.LmHandlerPackageRegister)
</UL>
<P><STRONG><a name="[231]"></a>LmHandlerPackagesNotify</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, lmhandler.o(.text.LmHandlerPackagesNotify))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LmHandlerPackagesNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MlmeConfirm
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McpsIndication
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McpsConfirm
</UL>

<P><STRONG><a name="[48]"></a>McpsConfirm</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, lmhandler.o(.text.McpsConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = McpsConfirm &rArr; LmHandlerPackagesNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerPackagesNotify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmhandler.o(.text.LmHandlerInit)
</UL>
<P><STRONG><a name="[47]"></a>McpsIndication</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, lmhandler.o(.text.McpsIndication))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = McpsIndication &rArr; LmHandlerSend &rArr; LmHandlerJoin &rArr; LoRaMacMlmeRequest &rArr; ScheduleTx &rArr; LoRaMacCryptoSecureMessage &rArr; SecureElementComputeAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; lorawan_aes_encrypt &rArr; copy_and_key
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetCurrentClass
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSend
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerPackagesNotify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmhandler.o(.text.LmHandlerInit)
</UL>
<P><STRONG><a name="[46]"></a>MlmeConfirm</STRONG> (Thumb, 88 bytes, Stack size 56 bytes, lmhandler.o(.text.MlmeConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = MlmeConfirm &rArr; LmHandlerRequestClass &rArr; LoRaMacMibSetRequestConfirm &rArr; LoRaMacCryptoSetKey &rArr; LoRaMacCryptoDeriveMcRootKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_set_key &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerRequestClass
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetTxDatarate
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerPackagesNotify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmhandler.o(.text.LmHandlerInit)
</UL>
<P><STRONG><a name="[45]"></a>MlmeIndication</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lmhandler.o(.text.MlmeIndication))
<BR>[Address Reference Count : 1]<UL><LI> lmhandler.o(.text.LmHandlerInit)
</UL>
<P><STRONG><a name="[b]"></a>LmhpComplianceInit</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lmhpcompliance.o(.text.LmhpComplianceInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LmhpComplianceInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmhpcompliance.o(.data.LmhpCompliancePackage)
</UL>
<P><STRONG><a name="[c]"></a>LmhpComplianceIsInitialized</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lmhpcompliance.o(.text.LmhpComplianceIsInitialized))
<BR>[Address Reference Count : 1]<UL><LI> lmhpcompliance.o(.data.LmhpCompliancePackage)
</UL>
<P><STRONG><a name="[d]"></a>LmhpComplianceIsRunning</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lmhpcompliance.o(.text.LmhpComplianceIsRunning))
<BR>[Address Reference Count : 1]<UL><LI> lmhpcompliance.o(.data.LmhpCompliancePackage)
</UL>
<P><STRONG><a name="[f]"></a>LmhpComplianceOnMcpsConfirm</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, lmhpcompliance.o(.text.LmhpComplianceOnMcpsConfirm))
<BR>[Address Reference Count : 1]<UL><LI> lmhpcompliance.o(.data.LmhpCompliancePackage)
</UL>
<P><STRONG><a name="[10]"></a>LmhpComplianceOnMcpsIndication</STRONG> (Thumb, 508 bytes, Stack size 56 bytes, lmhpcompliance.o(.text.LmhpComplianceOnMcpsIndication))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = LmhpComplianceOnMcpsIndication &rArr; LoRaMacMlmeRequest &rArr; ScheduleTx &rArr; LoRaMacCryptoSecureMessage &rArr; SecureElementComputeAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; lorawan_aes_encrypt &rArr; copy_and_key
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Stop
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_SetPeriod
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Create
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpComplianceTxProcess
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacTestSetDutyCycleOn
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmhpcompliance.o(.data.LmhpCompliancePackage)
</UL>
<P><STRONG><a name="[11]"></a>LmhpComplianceOnMlmeConfirm</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lmhpcompliance.o(.text.LmhpComplianceOnMlmeConfirm))
<BR>[Address Reference Count : 1]<UL><LI> lmhpcompliance.o(.data.LmhpCompliancePackage)
</UL>
<P><STRONG><a name="[e]"></a>LmhpComplianceProcess</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lmhpcompliance.o(.text.LmhpComplianceProcess))
<BR>[Address Reference Count : 1]<UL><LI> lmhpcompliance.o(.data.LmhpCompliancePackage)
</UL>
<P><STRONG><a name="[1cf]"></a>LmhpComplianceTxProcess</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, lmhpcompliance.o(.text.LmhpComplianceTxProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LmhpComplianceTxProcess &rArr; UTIL_TIMER_Start &rArr; TimerInsertNewHeadTimer &rArr; TimerSetTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnComplianceTxNextPacketTimerEvent
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpComplianceOnMcpsIndication
</UL>

<P><STRONG><a name="[4e]"></a>OnComplianceTxNextPacketTimerEvent</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lmhpcompliance.o(.text.OnComplianceTxNextPacketTimerEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = OnComplianceTxNextPacketTimerEvent &rArr; LmhpComplianceTxProcess &rArr; UTIL_TIMER_Start &rArr; TimerInsertNewHeadTimer &rArr; TimerSetTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpComplianceTxProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmhpcompliance.o(.text.LmhpComplianceOnMcpsIndication)
</UL>
<P><STRONG><a name="[172]"></a>CallNvmCtxCallback</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, loramac.o(.text.CallNvmCtxCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CallNvmCtxCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventSecureElementNvmCtxChanged
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRegionNvmCtxChanged
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventMacNvmCtxChanged
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventCryptoNvmCtxChanged
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventConfirmQueueNvmCtxChanged
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventCommandsNvmCtxChanged
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventClassBNvmCtxChanged
</UL>

<P><STRONG><a name="[5f]"></a>EventClassBNvmCtxChanged</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, loramac.o(.text.EventClassBNvmCtxChanged))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EventClassBNvmCtxChanged &rArr; CallNvmCtxCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallNvmCtxCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(.text.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[5e]"></a>EventCommandsNvmCtxChanged</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, loramac.o(.text.EventCommandsNvmCtxChanged))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EventCommandsNvmCtxChanged &rArr; CallNvmCtxCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallNvmCtxCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(.text.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[50]"></a>EventConfirmQueueNvmCtxChanged</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, loramac.o(.text.EventConfirmQueueNvmCtxChanged))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EventConfirmQueueNvmCtxChanged &rArr; CallNvmCtxCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallNvmCtxCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(.text.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[5d]"></a>EventCryptoNvmCtxChanged</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, loramac.o(.text.EventCryptoNvmCtxChanged))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EventCryptoNvmCtxChanged &rArr; CallNvmCtxCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallNvmCtxCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(.text.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[173]"></a>EventMacNvmCtxChanged</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, loramac.o(.text.EventMacNvmCtxChanged))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EventMacNvmCtxChanged &rArr; CallNvmCtxCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallNvmCtxCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
</UL>

<P><STRONG><a name="[174]"></a>EventRegionNvmCtxChanged</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, loramac.o(.text.EventRegionNvmCtxChanged))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EventRegionNvmCtxChanged &rArr; CallNvmCtxCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallNvmCtxCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>

<P><STRONG><a name="[5c]"></a>EventSecureElementNvmCtxChanged</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, loramac.o(.text.EventSecureElementNvmCtxChanged))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EventSecureElementNvmCtxChanged &rArr; CallNvmCtxCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallNvmCtxCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(.text.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[179]"></a>GetMaxAppPayloadWithoutFOptsLength</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, loramac.o(.text.GetMaxAppPayloadWithoutFOptsLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GetMaxAppPayloadWithoutFOptsLength &rArr; RegionGetPhyParam &rArr; RegionKR920GetPhyParam &rArr; randr &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacQueryTxPossible
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
</UL>

<P><STRONG><a name="[1b3]"></a>HandleRadioRxErrorTimeout</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, loramac.o(.text.HandleRadioRxErrorTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HandleRadioRxErrorTimeout &rArr; UTIL_TIMER_Stop &rArr; TimerSetTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Stop
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_GetElapsedTime
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueSetStatusCmn
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBSetPingSlotState
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBSetMulticastSlotState
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBSetBeaconState
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBPingSlotTimerEvent
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBMulticastSlotTimerEvent
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBIsPingExpected
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBIsMulticastExpected
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBIsBeaconExpected
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBBeaconTimerEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[56]"></a>OnAckTimeoutTimerEvent</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, loramac.o(.text.OnAckTimeoutTimerEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OnAckTimeoutTimerEvent &rArr; UTIL_TIMER_Stop &rArr; TimerSetTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareRxDoneAbort
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(.text.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[58]"></a>OnRadioRxDone</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, loramac.o(.text.OnRadioRxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = OnRadioRxDone &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_GetCurrentTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(.text.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[5b]"></a>OnRadioRxError</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, loramac.o(.text.OnRadioRxError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OnRadioRxError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(.text.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[5a]"></a>OnRadioRxTimeout</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, loramac.o(.text.OnRadioRxTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = OnRadioRxTimeout &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(.text.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[57]"></a>OnRadioTxDone</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, loramac.o(.text.OnRadioTxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = OnRadioTxDone &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeGet
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_GetCurrentTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(.text.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[59]"></a>OnRadioTxTimeout</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, loramac.o(.text.OnRadioTxTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = OnRadioTxTimeout &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(.text.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[54]"></a>OnRxWindow1TimerEvent</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, loramac.o(.text.OnRxWindow1TimerEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = OnRxWindow1TimerEvent &rArr; RxWindowSetup &rArr; RegionRxConfig &rArr; RegionKR920RxConfig &rArr; RegionCommonRxConfigPrint &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxWindowSetup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(.text.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[55]"></a>OnRxWindow2TimerEvent</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, loramac.o(.text.OnRxWindow2TimerEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = OnRxWindow2TimerEvent &rArr; RxWindowSetup &rArr; RegionRxConfig &rArr; RegionKR920RxConfig &rArr; RegionCommonRxConfigPrint &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxWindowSetup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(.text.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[52]"></a>OnTxDelayedTimerEvent</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, loramac.o(.text.OnTxDelayedTimerEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = OnTxDelayedTimerEvent &rArr; ScheduleTx &rArr; LoRaMacCryptoSecureMessage &rArr; SecureElementComputeAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; lorawan_aes_encrypt &rArr; copy_and_key
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Stop
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueSetStatusCmn
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopRetransmission
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(.text.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[211]"></a>OpenContinuousRxCWindow</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, loramac.o(.text.OpenContinuousRxCWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = OpenContinuousRxCWindow &rArr; RegionRxConfig &rArr; RegionKR920RxConfig &rArr; RegionCommonRxConfigPrint &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxConfig
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionComputeRxWindowParameters
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchClass
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>

<P><STRONG><a name="[21f]"></a>PrepareRxDoneAbort</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, loramac.o(.text.PrepareRxDoneAbort))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PrepareRxDoneAbort &rArr; OnAckTimeoutTimerEvent &rArr; UTIL_TIMER_Stop &rArr; TimerSetTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnAckTimeoutTimerEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[225]"></a>ProcessMacCommands</STRONG> (Thumb, 1296 bytes, Stack size 120 bytes, loramac.o(.text.ProcessMacCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = ProcessMacCommands &rArr; RegionLinkAdrReq &rArr; RegionKR920LinkAdrReq &rArr; RegionCommonLinkAdrReqVerifyParams &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeGet
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeSub
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeSet
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeAdd
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionTxParamSetupReq
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxParamSetupReq
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionNewChannelReq
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionLinkAdrReq
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionDlChannelReq
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueSetStatus
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueIsCmdActive
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsGetCmdSize
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsAddCmd
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBPingSlotInfoAns
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBPingSlotChannelReq
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBDeviceTimeAns
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBBeaconTimingAns
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBBeaconFreqReq
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[1f9]"></a>ResetMacParameters</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, loramac.o(.text.ResetMacParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ResetMacParameters &rArr; RegionInitDefaults &rArr; RegionKR920InitDefaults
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionInitDefaults
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
</UL>

<P><STRONG><a name="[234]"></a>RxWindowSetup</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, loramac.o(.text.RxWindowSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = RxWindowSetup &rArr; RegionRxConfig &rArr; RegionKR920RxConfig &rArr; RegionCommonRxConfigPrint &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Stop
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxWindow2TimerEvent
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxWindow1TimerEvent
</UL>

<P><STRONG><a name="[202]"></a>ScheduleTx</STRONG> (Thumb, 832 bytes, Stack size 112 bytes, loramac.o(.text.ScheduleTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = ScheduleTx &rArr; LoRaMacCryptoSecureMessage &rArr; SecureElementComputeAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; lorawan_aes_encrypt &rArr; copy_and_key
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Start
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_SetPeriod
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeSub
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeGetMcuTime
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionTxConfig
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionNextChannel
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionComputeRxWindowParameters
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionApplyDrOffset
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacSerializerJoinRequest
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacSerializerData
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoSecureMessage
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoPrepareJoinRequest
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoGetFCntUp
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsGetSizeSerializedCmds
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBStopRxSlots
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBIsUplinkCollision
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBIsPingExpected
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBIsMulticastExpected
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBIsBeaconModeActive
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBIsBeaconExpected
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBHaltBeaconing
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMaxAppPayloadWithoutFOptsLength
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxDelayedTimerEvent
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
</UL>

<P><STRONG><a name="[221]"></a>StopRetransmission</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, loramac.o(.text.StopRetransmission))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxDelayedTimerEvent
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[20d]"></a>SwitchClass</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, loramac.o(.text.SwitchClass))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = SwitchClass &rArr; OpenContinuousRxCWindow &rArr; RegionRxConfig &rArr; RegionKR920RxConfig &rArr; RegionCommonRxConfigPrint &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBSwitchClass
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenContinuousRxCWindow
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>

<P><STRONG><a name="[1da]"></a>GetElement</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, loramacconfirmqueue.o(.text.GetElement))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GetElement
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueSetStatus
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueIsCmdActive
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueGetStatus
</UL>

<P><STRONG><a name="[16e]"></a>DeriveSessionKey10x</STRONG> (Thumb, 124 bytes, Stack size 48 bytes, loramaccrypto.o(.text.DeriveSessionKey10x))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = DeriveSessionKey10x &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_set_key &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementDeriveAndStoreKey
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoHandleJoinAccept
</UL>

<P><STRONG><a name="[4f]"></a>DummyCB</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramaccrypto.o(.text.DummyCB))
<BR>[Address Reference Count : 1]<UL><LI> loramaccrypto.o(.text.LoRaMacCryptoInit)
</UL>
<P><STRONG><a name="[1f6]"></a>GetKeyAddrItem</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, loramaccrypto.o(.text.GetKeyAddrItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetKeyAddrItem
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoUnsecureMessage
</UL>

<P><STRONG><a name="[1e5]"></a>GetLastFcntDown</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, loramaccrypto.o(.text.GetLastFcntDown))
<BR><BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoUnsecureMessage
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoGetFCntDown
</UL>

<P><STRONG><a name="[1f0]"></a>PayloadEncrypt</STRONG> (Thumb, 186 bytes, Stack size 72 bytes, loramaccrypto.o(.text.PayloadEncrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = PayloadEncrypt &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_set_key &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementAesEncrypt
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoUnsecureMessage
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoSecureMessage
</UL>

<P><STRONG><a name="[262]"></a>GetDutyCycle</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, regioncommon.o(.text.GetDutyCycle))
<BR><BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonUpdateBandTimeOff
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonSetBandTxDone
</UL>

<P><STRONG><a name="[276]"></a>GetTimeOnAir</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, regionkr920.o(.text.GetTimeOnAir))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetTimeOnAir
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920TxConfig
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920NextChannel
</UL>

<P><STRONG><a name="[26d]"></a>VerifyRfFreq</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, regionkr920.o(.text.VerifyRfFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = VerifyRfFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920ChannelAdd
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920Verify
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920RxParamSetupReq
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920DlChannelReq
</UL>

<P><STRONG><a name="[285]"></a>GetFskBandwidthRegValue</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, sx1276.o(.text.GetFskBandwidthRegValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetFskBandwidthRegValue
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
</UL>

<P><STRONG><a name="[281]"></a>RxChainCalibration</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, sx1276.o(.text.RxChainCalibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = RxChainCalibration &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; CMWX1ZZABZ0XX_RADIO_SendRecv &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
</UL>

<P><STRONG><a name="[6]"></a>SX1276OnDio0Irq</STRONG> (Thumb, 544 bytes, Stack size 24 bytes, sx1276.o(.text.SX1276OnDio0Irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = SX1276OnDio0Irq &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; CMWX1ZZABZ0XX_RADIO_SendRecv &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Stop
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadFifo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.data.DioIrq)
</UL>
<P><STRONG><a name="[7]"></a>SX1276OnDio1Irq</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, sx1276.o(.text.SX1276OnDio1Irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = SX1276OnDio1Irq &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; CMWX1ZZABZ0XX_RADIO_SendRecv &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Stop
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMWX1ZZABZ0XX_RADIO_GetDio1PinState
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteFifo
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadFifo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.data.DioIrq)
</UL>
<P><STRONG><a name="[8]"></a>SX1276OnDio2Irq</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, sx1276.o(.text.SX1276OnDio2Irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = SX1276OnDio2Irq &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; CMWX1ZZABZ0XX_RADIO_SendRecv &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Stop
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.data.DioIrq)
</UL>
<P><STRONG><a name="[9]"></a>SX1276OnDio3Irq</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, sx1276.o(.text.SX1276OnDio3Irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = SX1276OnDio3Irq &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; CMWX1ZZABZ0XX_RADIO_SendRecv &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.data.DioIrq)
</UL>
<P><STRONG><a name="[a]"></a>SX1276OnDio4Irq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sx1276.o(.text.SX1276OnDio4Irq))
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.data.DioIrq)
</UL>
<P><STRONG><a name="[6c]"></a>SX1276OnTimeoutIrq</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, sx1276.o(.text.SX1276OnTimeoutIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = SX1276OnTimeoutIrq &rArr; SX1276SetPublicNetwork &rArr; SX1276SetModem &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; CMWX1ZZABZ0XX_RADIO_SendRecv &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Stop
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMWX1ZZABZ0XX_RADIO_Reset
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetPublicNetwork
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxChainCalibration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.text.SX1276Init)
</UL>
<P><STRONG><a name="[286]"></a>SX1276ReadFifo</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sx1276.o(.text.SX1276ReadFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = SX1276ReadFifo &rArr; SX1276ReadBuffer &rArr; CMWX1ZZABZ0XX_RADIO_SendRecv &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio1Irq
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio0Irq
</UL>

<P><STRONG><a name="[284]"></a>SX1276SetOpMode</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, sx1276.o(.text.SX1276SetOpMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; CMWX1ZZABZ0XX_RADIO_SendRecv &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMWX1ZZABZ0XX_RADIO_SetXO
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMWX1ZZABZ0XX_RADIO_SetAntSw
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276StartCad
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxContinuousWave
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetStby
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetSleep
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Random
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
</UL>

<P><STRONG><a name="[287]"></a>SX1276WriteFifo</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sx1276.o(.text.SX1276WriteFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = SX1276WriteFifo &rArr; SX1276WriteBuffer &rArr; CMWX1ZZABZ0XX_RADIO_SendRecv &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio1Irq
</UL>

<P><STRONG><a name="[2a6]"></a>TRACE_AllocateBufer</STRONG> (Thumb, 124 bytes, Stack size 20 bytes, stm32_adv_trace.o(.text.TRACE_AllocateBufer))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TRACE_AllocateBufer
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>

<P><STRONG><a name="[29b]"></a>TRACE_Lock</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32_adv_trace.o(.text.TRACE_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACE_Send
</UL>

<P><STRONG><a name="[29a]"></a>TRACE_Send</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, stm32_adv_trace.o(.text.TRACE_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TRACE_Send &rArr; UTIL_ADV_TRACE_PreSendHook
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_PreSendHook
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACE_UnLock
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACE_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>

<P><STRONG><a name="[78]"></a>TRACE_TxCpltCallback</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, stm32_adv_trace.o(.text.TRACE_TxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TRACE_TxCpltCallback &rArr; UTIL_ADV_TRACE_PostSendHook
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_PostSendHook
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACE_UnLock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32_adv_trace.o(.text.UTIL_ADV_TRACE_Init)
</UL>
<P><STRONG><a name="[29c]"></a>TRACE_UnLock</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32_adv_trace.o(.text.TRACE_UnLock))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACE_TxCpltCallback
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACE_Send
</UL>

<P><STRONG><a name="[291]"></a>CalendarDiv60</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, stm32_systime.o(.text.CalendarDiv60))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CalendarDiv60
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeLocalTime
</UL>

<P><STRONG><a name="[292]"></a>CalendarDiv61</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32_systime.o(.text.CalendarDiv61))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CalendarDiv61
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeLocalTime
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
